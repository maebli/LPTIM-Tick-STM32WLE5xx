
LPTIM-Tick-STM32WLE5xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005838  08005838  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005838  08005838  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005838  08005838  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b4  20000010  08005850  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  08005850  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae9c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b34  00000000  00000000  0003aed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0003ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b66  00000000  00000000  00041ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001762b  00000000  00000000  0004563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0eec  00000000  00000000  0005cc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010db55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006884  00000000  00000000  0010dba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005724 	.word	0x08005724

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005724 	.word	0x08005724

08000180 <vApplicationTickHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <vApplicationGetIdleTaskMemory+0x28>)
 80001bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2280      	movs	r2, #128	; 0x80
 80001c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	20000080 	.word	0x20000080

080001dc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	60f8      	str	r0, [r7, #12]
 80001e4:	60b9      	str	r1, [r7, #8]
 80001e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <vApplicationGetTimerTaskMemory+0x2c>)
 80001ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <vApplicationGetTimerTaskMemory+0x30>)
 80001f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001fa:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000280 	.word	0x20000280
 800020c:	200002d4 	.word	0x200002d4

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4906      	ldr	r1, [pc, #24]	; (8000244 <__NVIC_EnableIRQ+0x34>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e100 	.word	0xe000e100

08000248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	6039      	str	r1, [r7, #0]
 8000252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000258:	2b00      	cmp	r3, #0
 800025a:	db0a      	blt.n	8000272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	b2da      	uxtb	r2, r3
 8000260:	490c      	ldr	r1, [pc, #48]	; (8000294 <__NVIC_SetPriority+0x4c>)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	0112      	lsls	r2, r2, #4
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	440b      	add	r3, r1
 800026c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000270:	e00a      	b.n	8000288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4908      	ldr	r1, [pc, #32]	; (8000298 <__NVIC_SetPriority+0x50>)
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	f003 030f 	and.w	r3, r3, #15
 800027e:	3b04      	subs	r3, #4
 8000280:	0112      	lsls	r2, r2, #4
 8000282:	b2d2      	uxtb	r2, r2
 8000284:	440b      	add	r3, r1
 8000286:	761a      	strb	r2, [r3, #24]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000e100 	.word	0xe000e100
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <vPortSetupTimerInterrupt>:
//
//      This function overrides the "standard" port function, decorated with __attribute__((weak)), in port.c.
// Call with interrupts masked.
//
void vPortSetupTimerInterrupt( void )
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
   //      Be sure the reference clock is ready.  If this assertion fails, be sure your application code
   // starts the reference clock (LSE or LSI) prior to starting FreeRTOS.
   //
   configASSERT(IS_REF_CLOCK_READY());
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10a      	bne.n	80002c8 <vPortSetupTimerInterrupt+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002b6:	f383 8811 	msr	BASEPRI, r3
 80002ba:	f3bf 8f6f 	isb	sy
 80002be:	f3bf 8f4f 	dsb	sy
 80002c2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80002c4:	bf00      	nop
 80002c6:	e7fe      	b.n	80002c6 <vPortSetupTimerInterrupt+0x2a>
   // LPTIM just in case it was already in use prior to this function.
   //
   //      Modify these statements as needed for your STM32.  See LPTIM Instance Selection (above) for
   // additional information.
   //
   RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 80002c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d6:	6593      	str	r3, [r2, #88]	; 0x58
   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMSEL_Val << RCC_CCIPR_LPTIM1SEL_Pos);
 80002d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002e4:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_LPTIM1_STOP;
 80002ec:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <vPortSetupTimerInterrupt+0x13c>)
 80002ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f0:	4a39      	ldr	r2, [pc, #228]	; (80003d8 <vPortSetupTimerInterrupt+0x13c>)
 80002f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002f6:	63d3      	str	r3, [r2, #60]	; 0x3c
   RCC->APB1RSTR1 |= RCC_APB1RSTR1_LPTIM1RST;   // Reset the LPTIM module per erratum 2.14.1.
 80002f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000306:	6393      	str	r3, [r2, #56]	; 0x38
   RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_LPTIM1RST;
 8000308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800030c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800030e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000316:	6393      	str	r3, [r2, #56]	; 0x38

   //      Calculate the constants required to configure the tick interrupt.
   //
   ulTimerCountsForOneTick = ( LPTIM_CLOCK_HZ + ( configTICK_RATE_HZ / 2 ) ) / configTICK_RATE_HZ;
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <vPortSetupTimerInterrupt+0x140>)
 800031a:	2221      	movs	r2, #33	; 0x21
 800031c:	601a      	str	r2, [r3, #0]
   configASSERT( ulTimerCountsForOneTick >= 4UL );  // CLOCK frequency must be at least 3.5x TICK frequency
 800031e:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <vPortSetupTimerInterrupt+0x140>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d80a      	bhi.n	800033c <vPortSetupTimerInterrupt+0xa0>
	__asm volatile
 8000326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800032a:	f383 8811 	msr	BASEPRI, r3
 800032e:	f3bf 8f6f 	isb	sy
 8000332:	f3bf 8f4f 	dsb	sy
 8000336:	60bb      	str	r3, [r7, #8]
}
 8000338:	bf00      	nop
 800033a:	e7fe      	b.n	800033a <vPortSetupTimerInterrupt+0x9e>
   {
      xMaximumSuppressedTicks = 65536UL / ulTimerCountsForOneTick - 1 - 1;
   }
   #else
   {
      xMaximumSuppressedTicks = 65536UL * configTICK_RATE_HZ / LPTIM_CLOCK_HZ - 1 - 1;
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <vPortSetupTimerInterrupt+0x144>)
 800033e:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000342:	601a      	str	r2, [r3, #0]
         #define IS_SUBCOUNT_EPT_POSITIVE 1
      #else
         #define IS_SUBCOUNT_EPT_POSITIVE 0
      #endif

      xTimerSubcountErrorPerTick = LPTIM_CLOCK_HZ - ( ulTimerCountsForOneTick * configTICK_RATE_HZ );
 8000344:	4b25      	ldr	r3, [pc, #148]	; (80003dc <vPortSetupTimerInterrupt+0x140>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000354:	461a      	mov	r2, r3
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <vPortSetupTimerInterrupt+0x148>)
 8000358:	601a      	str	r2, [r3, #0]
      configASSERT( xTimerSubcountErrorPerTick != configTICK_RATE_HZ / 2 );
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <vPortSetupTimerInterrupt+0x148>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000362:	d10a      	bne.n	800037a <vPortSetupTimerInterrupt+0xde>
	__asm volatile
 8000364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000368:	f383 8811 	msr	BASEPRI, r3
 800036c:	f3bf 8f6f 	isb	sy
 8000370:	f3bf 8f4f 	dsb	sy
 8000374:	607b      	str	r3, [r7, #4]
}
 8000376:	bf00      	nop
 8000378:	e7fe      	b.n	8000378 <vPortSetupTimerInterrupt+0xdc>
   #endif // configLPTIM_ENABLE_PRECISION


   //      Configure and start LPTIM.
   //
   LPTIM->IER = LPTIM_IER_CMPMIE | LPTIM_IER_CMPOKIE;   // Modify this register only when LPTIM is disabled.
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 800037c:	2209      	movs	r2, #9
 800037e:	609a      	str	r2, [r3, #8]
   LPTIM->CFGR = (0 << LPTIM_CFGR_PRESC_Pos);           // Modify this register only when LPTIM is disabled.
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
   LPTIM->CR = LPTIM_CR_ENABLE;
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 8000388:	2201      	movs	r2, #1
 800038a:	611a      	str	r2, [r3, #16]
   LPTIM->ARR = 0xFFFF;        // timer period = ARR + 1.  Modify this register only when LPTIM is enabled.
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 800038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000392:	619a      	str	r2, [r3, #24]
   LPTIM->CMP = ulTimerCountsForOneTick;                // Modify this register only when LPTIM is enabled.
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <vPortSetupTimerInterrupt+0x140>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6153      	str	r3, [r2, #20]
   isCmpWriteInProgress = pdTRUE;
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <vPortSetupTimerInterrupt+0x150>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
   idealCmp = ulTimerCountsForOneTick;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <vPortSetupTimerInterrupt+0x140>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <vPortSetupTimerInterrupt+0x154>)
 80003aa:	801a      	strh	r2, [r3, #0]
   #if ( configLPTIM_ENABLE_PRECISION != 0 )
   {
      runningSubcountError = xTimerSubcountErrorPerTick;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <vPortSetupTimerInterrupt+0x148>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <vPortSetupTimerInterrupt+0x158>)
 80003b2:	6013      	str	r3, [r2, #0]
   }
   #endif // configLPTIM_ENABLE_PRECISION
   LPTIM->CR |= LPTIM_CR_CNTSTRT;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <vPortSetupTimerInterrupt+0x14c>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6113      	str	r3, [r2, #16]

   //      Enable the timer interrupt at the configured priority.  See configTICK_INTERRUPT_PRIORITY for
   // important details.
   //
   NVIC_SetPriority( LPTIM_IRQn, configTICK_INTERRUPT_PRIORITY );
 80003c0:	210f      	movs	r1, #15
 80003c2:	2027      	movs	r0, #39	; 0x27
 80003c4:	f7ff ff40 	bl	8000248 <__NVIC_SetPriority>
   NVIC_EnableIRQ( LPTIM_IRQn );
 80003c8:	2027      	movs	r0, #39	; 0x27
 80003ca:	f7ff ff21 	bl	8000210 <__NVIC_EnableIRQ>
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	e0042000 	.word	0xe0042000
 80003dc:	200006d8 	.word	0x200006d8
 80003e0:	200006d4 	.word	0x200006d4
 80003e4:	200006dc 	.word	0x200006dc
 80003e8:	40007c00 	.word	0x40007c00
 80003ec:	200006e6 	.word	0x200006e6
 80003f0:	200006e4 	.word	0x200006e4
 80003f4:	200006e0 	.word	0x200006e0

080003f8 <vPortSuppressTicksAndSleep>:
//
//      FreeRTOS version 10.4.0 or newer is recommended to ensure this function doesn't potentially return one
// OS tick *after* the intended time.
//
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08e      	sub	sp, #56	; 0x38
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
   //      Limit the time we plan to spend in tickless idle.  LPTIM has only so much range.
   //
   if (xExpectedIdleTime > xMaximumSuppressedTicks)
 8000400:	4ba0      	ldr	r3, [pc, #640]	; (8000684 <vPortSuppressTicksAndSleep+0x28c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	429a      	cmp	r2, r3
 8000408:	d902      	bls.n	8000410 <vPortSuppressTicksAndSleep+0x18>
   {
      xExpectedIdleTime = xMaximumSuppressedTicks;
 800040a:	4b9e      	ldr	r3, [pc, #632]	; (8000684 <vPortSuppressTicksAndSleep+0x28c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	607b      	str	r3, [r7, #4]
   //      Determine the number of "extra" timer counts to add to the compare register, which is currently set
   // for the next tick.  Because the next tick is less than one tick away, we know we won't set the compare
   // register more than xMaximumSuppressedTicks (in timer counts) from the *current* CNT value.
   //
   #if ( configLPTIM_ENABLE_PRECISION != 0 )
      uint32_t extraCounts = (xExpectedIdleTime - 1UL) * LPTIM_CLOCK_HZ / configTICK_RATE_HZ;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	03db      	lsls	r3, r3, #15
 8000416:	4a9c      	ldr	r2, [pc, #624]	; (8000688 <vPortSuppressTicksAndSleep+0x290>)
 8000418:	fba2 2303 	umull	r2, r3, r2, r3
 800041c:	099b      	lsrs	r3, r3, #6
 800041e:	637b      	str	r3, [r7, #52]	; 0x34
      int extraError = (xExpectedIdleTime - 1UL) * LPTIM_CLOCK_HZ % configTICK_RATE_HZ;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3b01      	subs	r3, #1
 8000424:	03da      	lsls	r2, r3, #15
 8000426:	4b98      	ldr	r3, [pc, #608]	; (8000688 <vPortSuppressTicksAndSleep+0x290>)
 8000428:	fba3 1302 	umull	r1, r3, r3, r2
 800042c:	099b      	lsrs	r3, r3, #6
 800042e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000432:	fb01 f303 	mul.w	r3, r1, r3
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043a:	b672      	cpsid	i
}
 800043c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800043e:	f3bf 8f4f 	dsb	sy
}
 8000442:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000444:	f3bf 8f6f 	isb	sy
}
 8000448:	bf00      	nop

   //      If a context switch is pending or a task is waiting for the scheduler to be unsuspended, then
   // abandon the low power entry and the critical section.  This status cannot change while interrupts are
   // masked.
   //
   if (eTaskConfirmSleepModeStatus() == eAbortSleep)
 800044a:	f004 f883 	bl	8004554 <eTaskConfirmSleepModeStatus>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <vPortSuppressTicksAndSleep+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
 8000454:	b662      	cpsie	i
}
 8000456:	e111      	b.n	800067c <vPortSuppressTicksAndSleep+0x284>
      {
         //      Adjust extraCounts if needed to maintain proper alignment.  We left extraError positive above
         // instead of minimizing its absolute value, so we don't need to check the final value of
         // runningSubcountError for being too negative.
         //
         runningSubcountError += extraError;
 8000458:	4b8c      	ldr	r3, [pc, #560]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045e:	4413      	add	r3, r2
 8000460:	4a8a      	ldr	r2, [pc, #552]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000462:	6013      	str	r3, [r2, #0]
         if (runningSubcountError > (int)(configTICK_RATE_HZ/2))
 8000464:	4b89      	ldr	r3, [pc, #548]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800046c:	dd09      	ble.n	8000482 <vPortSuppressTicksAndSleep+0x8a>
         {
            extraCounts++;
 800046e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000470:	3301      	adds	r3, #1
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
            runningSubcountError -= configTICK_RATE_HZ;
 8000474:	4b85      	ldr	r3, [pc, #532]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800047c:	461a      	mov	r2, r3
 800047e:	4b83      	ldr	r3, [pc, #524]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000480:	601a      	str	r2, [r3, #0]
      // the tick ISR too much while isTickNowSuppressed is true.  Too much delay would cause the ISR to
      // reject the tick at the end of the delay because the tick would appear to be still in the future, but
      // we need that tick, either to get us out of the loop below or to help us decide if we reached the tick
      // after the loop.
      //
      isTickNowSuppressed = pdTRUE;
 8000482:	4b83      	ldr	r3, [pc, #524]	; (8000690 <vPortSuppressTicksAndSleep+0x298>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
      //      Add the extra counts to the upcoming timer interrupt.  If we can't write to the CMP register
      // right now, the ISR for CMPOK will do it for us.  If the timer happens to match on the old value
      // before the new value takes effect (any time after we mask interrupts above), the tick ISR rejects it
      // as a tick when we unmask interrupts below.
      //
      idealCmp += extraCounts;  // (idealCmp is a uint16_t)
 8000488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b81      	ldr	r3, [pc, #516]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	4413      	add	r3, r2
 8000494:	b29a      	uxth	r2, r3
 8000496:	4b7f      	ldr	r3, [pc, #508]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000498:	801a      	strh	r2, [r3, #0]
      if (!isCmpWriteInProgress)
 800049a:	4b7f      	ldr	r3, [pc, #508]	; (8000698 <vPortSuppressTicksAndSleep+0x2a0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d110      	bne.n	80004c6 <vPortSuppressTicksAndSleep+0xce>
      {
         isCmpWriteInProgress = pdTRUE;
 80004a4:	4b7c      	ldr	r3, [pc, #496]	; (8000698 <vPortSuppressTicksAndSleep+0x2a0>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
         LPTIM->CMP = idealCmp == 0xFFFF ? 0 : idealCmp;  // never write 0xFFFF to CMP (HW rule)
 80004aa:	4b7a      	ldr	r3, [pc, #488]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d003      	beq.n	80004c0 <vPortSuppressTicksAndSleep+0xc8>
 80004b8:	4b76      	ldr	r3, [pc, #472]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	e000      	b.n	80004c2 <vPortSuppressTicksAndSleep+0xca>
 80004c0:	2300      	movs	r3, #0
 80004c2:	4a76      	ldr	r2, [pc, #472]	; (800069c <vPortSuppressTicksAndSleep+0x2a4>)
 80004c4:	6153      	str	r3, [r2, #20]
      }
      uint32_t expectedEndCmp = idealCmp;
 80004c6:	4b73      	ldr	r3, [pc, #460]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	623b      	str	r3, [r7, #32]
         // to burden this loop with those calculations because the typical ISR requests a context switch,
         // inducing an exit from this loop, not another pass.  The CMPOK interrupt is the exception, and is
         // the primary reason for this loop, but it comes within one tick anyway, so there is no need to
         // recalculate xModifiableIdleTime for that case.
         //
         TickType_t xModifiableIdleTime = xExpectedIdleTime;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	61fb      	str	r3, [r7, #28]
         configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 80004d2:	f000 fbd9 	bl	8000c88 <vUlpPreSleepProcessing>
         if (xModifiableIdleTime > 0)
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d006      	beq.n	80004ea <vPortSuppressTicksAndSleep+0xf2>
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
}
 80004e0:	bf00      	nop
         {
            //      Wait for an interrupt.
            //
            __DSB();
            __WFI();
 80004e2:	bf30      	wfi
  __ASM volatile ("isb 0xF":::"memory");
 80004e4:	f3bf 8f6f 	isb	sy
}
 80004e8:	bf00      	nop
            __ISB();
         }
         configPOST_SLEEP_PROCESSING( (const TickType_t)xExpectedIdleTime );
 80004ea:	f000 fc13 	bl	8000d14 <vUlpPostSleepProcessing>
  __ASM volatile ("cpsie i" : : : "memory");
 80004ee:	b662      	cpsie	i
}
 80004f0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80004f2:	f3bf 8f4f 	dsb	sy
}
 80004f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f8:	f3bf 8f6f 	isb	sy
}
 80004fc:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80004fe:	b672      	cpsid	i
}
 8000500:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8000502:	f3bf 8f4f 	dsb	sy
}
 8000506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000508:	f3bf 8f6f 	isb	sy
}
 800050c:	bf00      	nop
         //
         __disable_irq();
         __DSB();
         __ISB();

      } while (idealCmp == expectedEndCmp && eTaskConfirmSleepModeStatus() != eAbortSleep);
 800050e:	4b61      	ldr	r3, [pc, #388]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b29b      	uxth	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	4293      	cmp	r3, r2
 800051a:	d104      	bne.n	8000526 <vPortSuppressTicksAndSleep+0x12e>
 800051c:	f004 f81a 	bl	8004554 <eTaskConfirmSleepModeStatus>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1d3      	bne.n	80004ce <vPortSuppressTicksAndSleep+0xd6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000526:	b662      	cpsie	i
}
 8000528:	bf00      	nop
      //
      //      Begin by assuming we managed to stay asleep the entire time.  In that case, the tick ISR already
      // added one tick (well, actually the ISR "pended" the increment because the scheduler is currently
      // suspended, but it's all the same to us), so we use "- 1" here.
      //
      uint32_t ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3b01      	subs	r3, #1
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8000530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	613b      	str	r3, [r7, #16]
}
 8000542:	bf00      	nop
      // above.  We temporarily mask the tick interrupt while we make the assessment and manipulate idealCmp
      // (and CMP) if necessary.  We also mask any interrupts at or below its interrupt priority since those
      // interrupts are allowed to use consecutive execution time enough to cause us to miss ticks.
      //
      portDISABLE_INTERRUPTS();
      if (idealCmp == expectedEndCmp)
 8000544:	4b53      	ldr	r3, [pc, #332]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	4293      	cmp	r3, r2
 8000550:	f040 8087 	bne.w	8000662 <vPortSuppressTicksAndSleep+0x26a>

         //      Get a coherent copy of the current count value in the timer.  The CNT register is clocked
         // asynchronously, so we keep reading it until we get the same value during a verification read.
         //
         uint32_t currCount;
         do currCount = LPTIM->CNT; while (currCount != LPTIM->CNT);
 8000554:	4b51      	ldr	r3, [pc, #324]	; (800069c <vPortSuppressTicksAndSleep+0x2a4>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	4b50      	ldr	r3, [pc, #320]	; (800069c <vPortSuppressTicksAndSleep+0x2a4>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	69ba      	ldr	r2, [r7, #24]
 8000560:	429a      	cmp	r2, r3
 8000562:	d1f7      	bne.n	8000554 <vPortSuppressTicksAndSleep+0x15c>
         // configMAX_SYSCALL_INTERRUPT_PRIORITY can delay our capture of currCount.  That delay is limited
         // to less than one tick duration by stated requirement.  No need to do anything if fullCountsLeft is
         // "negative".  In fact there's no need to do anything if fullCountsLeft is less than a whole tick,
         // but fullTicksLeft (below) determines that.
         //
         uint32_t fullCountsLeft = (uint16_t)(idealCmp - currCount - 1UL);
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	b29a      	uxth	r2, r3
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	b29b      	uxth	r3, r3
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	b29b      	uxth	r3, r3
 8000572:	3b01      	subs	r3, #1
 8000574:	b29b      	uxth	r3, r3
 8000576:	617b      	str	r3, [r7, #20]
         #if ( configLPTIM_ENABLE_PRECISION == 0 )
         if (fullCountsLeft < xMaximumSuppressedTicks * ulTimerCountsForOneTick)
         #else
         if (fullCountsLeft < xMaximumSuppressedTicks * LPTIM_CLOCK_HZ / configTICK_RATE_HZ)
 8000578:	4b42      	ldr	r3, [pc, #264]	; (8000684 <vPortSuppressTicksAndSleep+0x28c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	03db      	lsls	r3, r3, #15
 800057e:	4a42      	ldr	r2, [pc, #264]	; (8000688 <vPortSuppressTicksAndSleep+0x290>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	099b      	lsrs	r3, r3, #6
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	429a      	cmp	r2, r3
 800058a:	d26a      	bcs.n	8000662 <vPortSuppressTicksAndSleep+0x26a>
            // we haven't skipped.
            //
            uint32_t fullTicksLeft;
            #if ( configLPTIM_ENABLE_PRECISION != 0 )
            {
               fullTicksLeft = fullCountsLeft * configTICK_RATE_HZ / LPTIM_CLOCK_HZ;
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	0bdb      	lsrs	r3, r3, #15
 8000598:	62fb      	str	r3, [r7, #44]	; 0x2c
               if (fullTicksLeft == xExpectedIdleTime)
 800059a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d102      	bne.n	80005a8 <vPortSuppressTicksAndSleep+0x1b0>
                  // here again.  Correct fullTicksLeft for that case here.
                  //
                  //      This correction is also useful if ppm corrections are active and we are using
                  // "alternate" duration ticks for more than just correcting for rounding error in the math.
                  //
                  fullTicksLeft = xExpectedIdleTime - 1UL;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            #else
            {
               fullTicksLeft = fullCountsLeft / ulTimerCountsForOneTick;
            }
            #endif // configLPTIM_ENABLE_PRECISION
            configASSERT( fullTicksLeft < xExpectedIdleTime );
 80005a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d30a      	bcc.n	80005c6 <vPortSuppressTicksAndSleep+0x1ce>
	__asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	60fb      	str	r3, [r7, #12]
}
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <vPortSuppressTicksAndSleep+0x1cc>

            if (fullTicksLeft != 0)
 80005c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d04a      	beq.n	8000662 <vPortSuppressTicksAndSleep+0x26a>
            {
               ulCompleteTickPeriods -= fullTicksLeft;
 80005cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
               // we're rescheduling now.
               //
               uint32_t fullTicksLeftAsCounts;
               #if ( configLPTIM_ENABLE_PRECISION != 0 )
               {
                  fullTicksLeftAsCounts = fullTicksLeft * LPTIM_CLOCK_HZ / configTICK_RATE_HZ;
 80005d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d6:	03db      	lsls	r3, r3, #15
 80005d8:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <vPortSuppressTicksAndSleep+0x290>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	099b      	lsrs	r3, r3, #6
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
                  extraError = fullTicksLeft * LPTIM_CLOCK_HZ % configTICK_RATE_HZ;
 80005e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e4:	03da      	lsls	r2, r3, #15
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <vPortSuppressTicksAndSleep+0x290>)
 80005e8:	fba3 1302 	umull	r1, r3, r3, r2
 80005ec:	099b      	lsrs	r3, r3, #6
 80005ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f2:	fb01 f303 	mul.w	r3, r1, r3
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
                  runningSubcountError -= extraError;
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000604:	6013      	str	r3, [r2, #0]
                  if (runningSubcountError < -(int)(configTICK_RATE_HZ/2))
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800060e:	da09      	bge.n	8000624 <vPortSuppressTicksAndSleep+0x22c>
                  {
                     fullTicksLeftAsCounts++;
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	3301      	adds	r3, #1
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
                     runningSubcountError += configTICK_RATE_HZ;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800061e:	461a      	mov	r2, r3
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <vPortSuppressTicksAndSleep+0x294>)
 8000622:	601a      	str	r2, [r3, #0]
               {
                  fullTicksLeftAsCounts = fullTicksLeft * ulTimerCountsForOneTick;
               }
               #endif // configLPTIM_ENABLE_PRECISION

               idealCmp -= fullTicksLeftAsCounts; // idealCmp is a uint16_t
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b29a      	uxth	r2, r3
 800062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062c:	b29b      	uxth	r3, r3
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000634:	801a      	strh	r2, [r3, #0]
               if (!isCmpWriteInProgress)
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <vPortSuppressTicksAndSleep+0x2a0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d110      	bne.n	8000662 <vPortSuppressTicksAndSleep+0x26a>
               {
                  isCmpWriteInProgress = pdTRUE;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <vPortSuppressTicksAndSleep+0x2a0>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
                  LPTIM->CMP = idealCmp == 0xFFFF ? 0 : idealCmp;  // never write 0xFFFF to CMP (HW rule)
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000650:	4293      	cmp	r3, r2
 8000652:	d003      	beq.n	800065c <vPortSuppressTicksAndSleep+0x264>
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <vPortSuppressTicksAndSleep+0x29c>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	e000      	b.n	800065e <vPortSuppressTicksAndSleep+0x266>
 800065c:	2300      	movs	r3, #0
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <vPortSuppressTicksAndSleep+0x2a4>)
 8000660:	6153      	str	r3, [r2, #20]
      //      Set isTickNowSuppressed back to false before we unmask the tick interrupt so the ISR has a
      // chance to identify any ticks missed while we had the tick interrupt masked.  Any missed ticks here
      // indicate a configuration error.  No combination of ISRs above the tick priority may execute for
      // longer than a tick.  See configTICK_INTERRUPT_PRIORITY.
      //
      isTickNowSuppressed = pdFALSE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <vPortSuppressTicksAndSleep+0x298>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000672:	bf00      	nop
      //      Increment the tick count by the number of (full) "extra" ticks we waited.  Function
      // vTaskStepTick() asserts that this function didn't oversleep.  Note that we don't have to worry about
      // modifying xTickCount count here while the tick count ISR is enabled because the scheduler is
      // currently suspended.  That causes the tick ISR to accumulate ticks into a pended-ticks field.
      //
      vTaskStepTick( ulCompleteTickPeriods );
 8000674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000676:	f003 fc8f 	bl	8003f98 <vTaskStepTick>
   }
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3738      	adds	r7, #56	; 0x38
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200006d4 	.word	0x200006d4
 8000688:	10624dd3 	.word	0x10624dd3
 800068c:	200006e0 	.word	0x200006e0
 8000690:	200006e7 	.word	0x200006e7
 8000694:	200006e4 	.word	0x200006e4
 8000698:	200006e6 	.word	0x200006e6
 800069c:	40007c00 	.word	0x40007c00

080006a0 <LPTIM1_IRQHandler>:

//============================================================================================================
// LPTIM_IRQHandler()
//
void LPTIM_IRQHandler( void )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
   //      So we proceed now to identify a tick, whether we have a CMPM interrupt or not.

   //      Acknowledge and clear the CMPM event.  Based on the errata, we dare not clear this flag unless it
   // is already set.  Call it an over-abundance of caution.
   //
   if (LPTIM->ISR & LPTIM_ISR_CMPM)
 80006a6:	4b5a      	ldr	r3, [pc, #360]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <LPTIM1_IRQHandler+0x18>
   {
      LPTIM->ICR = LPTIM_ICR_CMPMCF;
 80006b2:	4b57      	ldr	r3, [pc, #348]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
   // late because LPTIM raises the CMPM interrupt one count *after* the match event.  Use idealCmp in this
   // determination because it reliably reflects the match time we want right now, regardless of the sync
   // mechanism for CMP.
   //
   uint32_t countValue;
   do countValue = LPTIM->CNT; while (countValue != LPTIM->CNT);
 80006b8:	4b55      	ldr	r3, [pc, #340]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b54      	ldr	r3, [pc, #336]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d1f7      	bne.n	80006b8 <LPTIM1_IRQHandler+0x18>
   uint32_t countsLate = (uint16_t)(countValue - idealCmp);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b51      	ldr	r3, [pc, #324]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	617b      	str	r3, [r7, #20]
   //      Be sure not to misinterpret other conditions though.  When the tick is suppressed and scheduled for
   // more than one tick from now, it looks like we're late.  And when the tick is not suppressed, and we're
   // still waiting for an upcoming tick, it looks like we're very, very late.  In those cases, we're not
   // actually late, and there is no tick right now.
   //
   if (countsLate >= ulTimerCountsForOneTick &&
 80006d8:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <LPTIM1_IRQHandler+0x178>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d312      	bcc.n	8000708 <LPTIM1_IRQHandler+0x68>
       countsLate < 65536UL - 1 - ulTimerCountsForOneTick &&
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <LPTIM1_IRQHandler+0x178>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80006ea:	33ff      	adds	r3, #255	; 0xff
   if (countsLate >= ulTimerCountsForOneTick &&
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d20a      	bcs.n	8000708 <LPTIM1_IRQHandler+0x68>
       !isTickNowSuppressed)
 80006f2:	4b4a      	ldr	r3, [pc, #296]	; (800081c <LPTIM1_IRQHandler+0x17c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
       countsLate < 65536UL - 1 - ulTimerCountsForOneTick &&
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d105      	bne.n	8000708 <LPTIM1_IRQHandler+0x68>
   {
      //      Optionally report the number of ticks dropped.  (No need for precision here.)  Then arrange to
      // count the tick (below) and to schedule the next tick based on the current timer value.
      //
      traceTICKS_DROPPED( countsLate / ulTimerCountsForOneTick );
      idealCmp = countValue;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b44      	ldr	r3, [pc, #272]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 8000702:	801a      	strh	r2, [r3, #0]
      countsLate = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
   // interrupt that vPortSuppressTicksAndSleep() has restored even if it happens a little bit late due to the
   // sync mechanism, and even if that interrupt occurs before its corresponding CMPOK event occurs (happens
   // occasionally).  And finally, it helps us honor a tick that vPortSuppressTicksAndSleep() has restored,
   // but when the timer appears to have missed the match completely as explained above.
   //
   if (countsLate < ulTimerCountsForOneTick)
 8000708:	4b43      	ldr	r3, [pc, #268]	; (8000818 <LPTIM1_IRQHandler+0x178>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	429a      	cmp	r2, r3
 8000710:	d255      	bcs.n	80007be <LPTIM1_IRQHandler+0x11e>
   {
      //      We officially have an OS tick.  Count it, and set up the next one.

      uint32_t numCounts = ulTimerCountsForOneTick;
 8000712:	4b41      	ldr	r3, [pc, #260]	; (8000818 <LPTIM1_IRQHandler+0x178>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	613b      	str	r3, [r7, #16]
      #if ( configLPTIM_ENABLE_PRECISION != 0 )
      {
         runningSubcountError += xTimerSubcountErrorPerTick;
 8000718:	4b41      	ldr	r3, [pc, #260]	; (8000820 <LPTIM1_IRQHandler+0x180>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <LPTIM1_IRQHandler+0x184>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4413      	add	r3, r2
 8000722:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <LPTIM1_IRQHandler+0x180>)
 8000724:	6013      	str	r3, [r2, #0]
               runningSubcountError -= configTICK_RATE_HZ;
            }
         }
         #else
         {
            if (runningSubcountError <= -(int)(configTICK_RATE_HZ/2))
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <LPTIM1_IRQHandler+0x180>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800072e:	dc09      	bgt.n	8000744 <LPTIM1_IRQHandler+0xa4>
            {
               numCounts--;
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	3b01      	subs	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
               runningSubcountError += configTICK_RATE_HZ;
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <LPTIM1_IRQHandler+0x180>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800073e:	461a      	mov	r2, r3
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <LPTIM1_IRQHandler+0x180>)
 8000742:	601a      	str	r2, [r3, #0]
      #endif // configLPTIM_ENABLE_PRECISION

      //      Set up the next tick interrupt.  We must check isCmpWriteInProgress here as usual, in case CMPM
      // can come before CMPOK.
      //
      idealCmp += numCounts;  // idealCmp is a uint16_t
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	4413      	add	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b30      	ldr	r3, [pc, #192]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 8000754:	801a      	strh	r2, [r3, #0]
      if (!isCmpWriteInProgress)
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <LPTIM1_IRQHandler+0x188>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d110      	bne.n	8000782 <LPTIM1_IRQHandler+0xe2>
      {
         LPTIM->CMP = idealCmp == 0xFFFF ? 0 : idealCmp;  // never write 0xFFFF to CMP (HW rule)
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076a:	4293      	cmp	r3, r2
 800076c:	d003      	beq.n	8000776 <LPTIM1_IRQHandler+0xd6>
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	e000      	b.n	8000778 <LPTIM1_IRQHandler+0xd8>
 8000776:	2300      	movs	r3, #0
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 800077a:	6153      	str	r3, [r2, #20]
         isCmpWriteInProgress = pdTRUE;
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <LPTIM1_IRQHandler+0x188>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
	__asm volatile
 8000782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000786:	f383 8811 	msr	BASEPRI, r3
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	f3bf 8f4f 	dsb	sy
 8000792:	603b      	str	r3, [r7, #0]
}
 8000794:	bf00      	nop
      //      Tell the OS about the tick.  We don't need to bother saving and restoring the current BASEPRI
      // setting because (1) we cannot possibly already be in a critical section and (2) the NVIC won't take
      // interrupts of lower priority than LPTIM even when we set BASEPRI to zero until our ISR ends.
      //
      portDISABLE_INTERRUPTS();
      int wasHigherPriorityTaskWoken = xTaskIncrementTick();
 8000796:	f003 fc25 	bl	8003fe4 <xTaskIncrementTick>
 800079a:	60b8      	str	r0, [r7, #8]
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
	__asm volatile
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f383 8811 	msr	BASEPRI, r3
}
 80007a6:	bf00      	nop
      portENABLE_INTERRUPTS();

      portYIELD_FROM_ISR(wasHigherPriorityTaskWoken);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d007      	beq.n	80007be <LPTIM1_IRQHandler+0x11e>
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <LPTIM1_IRQHandler+0x18c>)
 80007b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	f3bf 8f4f 	dsb	sy
 80007ba:	f3bf 8f6f 	isb	sy

   //      Now that we've given as much time as possible for any CMP write to be finished, see if it has
   // finished.  We may have a new value to write after handling CMPM above.  Handling CMPOK last in this ISR
   // isn't very important, but it is a slight optimization over other ordering.
   //
   if (LPTIM->ISR & LPTIM_ISR_CMPOK)
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d01e      	beq.n	8000808 <LPTIM1_IRQHandler+0x168>
   {
      //      Acknowledge and clear the CMPOK event.
      //
      LPTIM->ICR = LPTIM_ICR_CMPOKCF;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	605a      	str	r2, [r3, #4]

      //      If there is a "pending" write operation to CMP, do it now.  Otherwise, make note that the write
      // is now complete.  Remember to watch for CMP set to 0 when idealCmp is 0xFFFF.  There's no
      // pending write in that case.
      //
      if ((uint16_t)(LPTIM->CMP - idealCmp) > 1UL)
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d90e      	bls.n	8000802 <LPTIM1_IRQHandler+0x162>
      {
         LPTIM->CMP = idealCmp == 0xFFFF ? 0 : idealCmp; // never write 0xFFFF to CMP (HW rule)
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d003      	beq.n	80007fa <LPTIM1_IRQHandler+0x15a>
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LPTIM1_IRQHandler+0x174>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	e000      	b.n	80007fc <LPTIM1_IRQHandler+0x15c>
 80007fa:	2300      	movs	r3, #0
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <LPTIM1_IRQHandler+0x170>)
 80007fe:	6153      	str	r3, [r2, #20]
      else
      {
         isCmpWriteInProgress = pdFALSE;
      }
   }
}
 8000800:	e002      	b.n	8000808 <LPTIM1_IRQHandler+0x168>
         isCmpWriteInProgress = pdFALSE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <LPTIM1_IRQHandler+0x188>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40007c00 	.word	0x40007c00
 8000814:	200006e4 	.word	0x200006e4
 8000818:	200006d8 	.word	0x200006d8
 800081c:	200006e7 	.word	0x200006e7
 8000820:	200006e0 	.word	0x200006e0
 8000824:	200006dc 	.word	0x200006dc
 8000828:	200006e6 	.word	0x200006e6
 800082c:	e000ed04 	.word	0xe000ed04

08000830 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000840:	f023 0218 	bic.w	r2, r3, #24
 8000844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4313      	orrs	r3, r2
 800084c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4313      	orrs	r3, r2
 8000870:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
	...

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 fa8b 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f81f 	bl	80008d8 <SystemClock_Config>
  //
  // Integrate lptimTick.c -- End of Block

  //      Initialize Ultra-Low Power support (ULP).
  //
  vUlpInit();
 800089a:	f000 f9e7 	bl	8000c6c <vUlpInit>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 f8a5 	bl	80009ec <MX_GPIO_Init>
  MX_RTC_Init();
 80008a2:	f000 f873 	bl	800098c <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, mainOsTask, osPriorityNormal, 0, 256);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <main+0x44>)
 80008a8:	1d3c      	adds	r4, r7, #4
 80008aa:	461d      	mov	r5, r3
 80008ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fa52 	bl	8002d66 <osThreadCreate>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <main+0x48>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008c8:	f002 fa46 	bl	8002d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x40>
 80008ce:	bf00      	nop
 80008d0:	08005748 	.word	0x08005748
 80008d4:	200014f8 	.word	0x200014f8

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09a      	sub	sp, #104	; 0x68
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2248      	movs	r2, #72	; 0x48
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 ff14 	bl	8005714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008fe:	f000 fb6f 	bl	8000fe0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff94 	bl	8000830 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <SystemClock_Config+0xb0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <SystemClock_Config+0xb0>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <SystemClock_Config+0xb0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000924:	2324      	movs	r3, #36	; 0x24
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000928:	2381      	movs	r3, #129	; 0x81
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000930:	2300      	movs	r3, #0
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000934:	23b0      	movs	r3, #176	; 0xb0
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fdf7 	bl	8001534 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800094c:	f000 f886 	bl	8000a5c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000950:	234f      	movs	r3, #79	; 0x4f
 8000952:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f97a 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800097a:	f000 f86f 	bl	8000a5c <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3768      	adds	r7, #104	; 0x68
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58000400 	.word	0x58000400

0800098c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_RTC_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_RTC_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_RTC_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 3;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_RTC_Init+0x58>)
 800099e:	2203      	movs	r2, #3
 80009a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 8191;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_RTC_Init+0x58>)
 80009a4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80009a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_RTC_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_RTC_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_RTC_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_RTC_Init+0x58>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_RTC_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_RTC_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_RTC_Init+0x58>)
 80009d2:	f001 fe2b 	bl	800262c <HAL_RTC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80009dc:	f000 f83e 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200014fc 	.word	0x200014fc
 80009e8:	40002800 	.word	0x40002800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ff32 	bl	800085a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff ff2f 	bl	800085a <LL_AHB2_GRP1_EnableClock>

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <mainOsTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mainOsTask */
void mainOsTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
   // that use sleep mode.  (The HAL tick already can't interrupt tickless idle periods that use stop mode,
   // because the HAL timer doesn't operate in stop mode.)  In a real application, the HAL tick might be
   // required by the HAL even after FreeRTOS has control.  It's still best to stop the timer here, and then
   // define HAL_GetTick() and HAL_Delay() to use the FreeRTOS tick (and delay) once available.
   //
   TIM17->CR1 &= ~TIM_CR1_CEN;  // wish CubeMX would generate a symbol for the HAL tick timer
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <mainOsTask+0x30>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <mainOsTask+0x30>)
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a18:	f002 f9f1 	bl	8002dfe <osDelay>
    i++;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <mainOsTask+0x34>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <mainOsTask+0x34>)
 8000a24:	6013      	str	r3, [r2, #0]
	if(i == 2){
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <mainOsTask+0x34>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d1f2      	bne.n	8000a14 <mainOsTask+0x14>
		while(1);
 8000a2e:	e7fe      	b.n	8000a2e <mainOsTask+0x2e>
 8000a30:	40014800 	.word	0x40014800
 8000a34:	200006e8 	.word	0x200006e8

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 f9cf 	bl	8000dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40014800 	.word	0x40014800

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>

08000a66 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	210f      	movs	r1, #15
 8000abe:	f06f 0001 	mvn.w	r0, #1
 8000ac2:	f000 fa64 	bl	8000f8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2238      	movs	r2, #56	; 0x38
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fe19 	bl	8005714 <memset>
  if(hrtc->Instance==RTC)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_RTC_MspInit+0x54>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d115      	bne.n	8000b18 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fc7b 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b08:	f7ff ffa8 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b0c:	f7ff ffab 	bl	8000a66 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b14:	f7ff ffb7 	bl	8000a86 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3740      	adds	r7, #64	; 0x40
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40002800 	.word	0x40002800

08000b24 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b6a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b6e:	f7ff ffd9 	bl	8000b24 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b72:	f107 0208 	add.w	r2, r7, #8
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fa5d 	bl	800203c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b82:	f001 fa49 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8000b86:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <HAL_InitTick+0xbc>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	3b01      	subs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_InitTick+0xc0>)
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_InitTick+0xc4>)
 8000b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_InitTick+0xc0>)
 8000b9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_InitTick+0xc0>)
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_InitTick+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_InitTick+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <HAL_InitTick+0xc0>)
 8000bb8:	f001 fe4a 	bl	8002850 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11b      	bne.n	8000c02 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_InitTick+0xc0>)
 8000bcc:	f001 fea0 	bl	8002910 <HAL_TIM_Base_Start_IT>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d111      	bne.n	8000c02 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000bde:	201d      	movs	r0, #29
 8000be0:	f000 f9ef 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d808      	bhi.n	8000bfc <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	201d      	movs	r0, #29
 8000bf0:	f000 f9cd 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <HAL_InitTick+0xc8>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e002      	b.n	8000c02 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20001534 	.word	0x20001534
 8000c18:	40014800 	.word	0x40014800
 8000c1c:	20000004 	.word	0x20000004

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
	...

08000c4c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM17_IRQHandler+0x10>)
 8000c52:	f001 fea9 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001534 	.word	0x20001534

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <vUlpInit>:
#include "FreeRTOS.h"
#include "task.h"
#include "ulp.h"

void vUlpInit()
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
   // reading dynamically like in original not working yet

#ifdef USING_HSI_AS_SYS_CLOCK
      SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
#else
      CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c7e:	6093      	str	r3, [r2, #8]
#endif

}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <vUlpPreSleepProcessing>:
//
static uint32_t rccCfgrSave;
static uint32_t rccCrSave;

void vUlpPreSleepProcessing()
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
   int useDeepSleep = pdFALSE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
   if (xDeepSleepForbiddenFlags == 0)
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <vUlpPreSleepProcessing+0x78>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10a      	bne.n	8000cb0 <vUlpPreSleepProcessing+0x28>
   {
      useDeepSleep = pdTRUE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
      MODIFY_REG(PWR->CR1, PWR_CR1_LPMS_Msk, PWR_CR1_LPMS_2);
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <vUlpPreSleepProcessing+0x7c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 0307 	bic.w	r3, r3, #7
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <vUlpPreSleepProcessing+0x7c>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e00f      	b.n	8000cd0 <vUlpPreSleepProcessing+0x48>
   }
   else if ((xDeepSleepForbiddenFlags & ~ulpPERIPHERALS_OK_IN_STOP1) == 0)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <vUlpPreSleepProcessing+0x78>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d109      	bne.n	8000cd0 <vUlpPreSleepProcessing+0x48>
   {
      useDeepSleep = pdTRUE;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
      MODIFY_REG(PWR->CR1, PWR_CR1_LPMS_Msk, PWR_CR1_LPMS_1);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <vUlpPreSleepProcessing+0x7c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 0307 	bic.w	r3, r3, #7
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <vUlpPreSleepProcessing+0x7c>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	6013      	str	r3, [r2, #0]
   }

   if (useDeepSleep)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00f      	beq.n	8000cf6 <vUlpPreSleepProcessing+0x6e>
   {
      rccCrSave = RCC->CR;
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <vUlpPreSleepProcessing+0x80>)
 8000cde:	6013      	str	r3, [r2, #0]
      rccCfgrSave = RCC->CFGR;
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <vUlpPreSleepProcessing+0x84>)
 8000ce8:	6013      	str	r3, [r2, #0]

      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <vUlpPreSleepProcessing+0x88>)
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <vUlpPreSleepProcessing+0x88>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6113      	str	r3, [r2, #16]
   }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	200006ec 	.word	0x200006ec
 8000d04:	58000400 	.word	0x58000400
 8000d08:	200006f4 	.word	0x200006f4
 8000d0c:	200006f0 	.word	0x200006f0
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <vUlpPostSleepProcessing>:

void vUlpPostSleepProcessing()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
   if (SCB->SCR & SCB_SCR_SLEEPDEEP_Msk)
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <vUlpPostSleepProcessing+0x38>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00f      	beq.n	8000d44 <vUlpPostSleepProcessing+0x30>
      //      We may have been in deep sleep.  If we were, the hardware cleared several enable bits in the CR,
      // and it changed the selected system clock in CFGR.  Restore them now.  If we're restarting the PLL as
      // the CPU clock here, the CPU will not wait for it.  Instead, the CPU continues executing from the
      // wake-up clock (MSI in our case) until the PLL is stable and then the CPU starts using the PLL.
      //
      RCC->CR = rccCrSave;
 8000d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <vUlpPostSleepProcessing+0x3c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6013      	str	r3, [r2, #0]
      RCC->CFGR = rccCfgrSave;
 8000d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <vUlpPostSleepProcessing+0x40>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6093      	str	r3, [r2, #8]

      SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <vUlpPostSleepProcessing+0x38>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <vUlpPostSleepProcessing+0x38>)
 8000d3e:	f023 0304 	bic.w	r3, r3, #4
 8000d42:	6113      	str	r3, [r2, #16]
      //      This application bypasses the RTC shadow registers, so we don't need to clear the sync flag for
      // those registers.  They are always out of sync when coming out of deep sleep.
      //
      // RTC->ISR &= ~RTC_ISR_RSF;
   }
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00
 8000d50:	200006f4 	.word	0x200006f4
 8000d54:	200006f0 	.word	0x200006f0

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff ff80 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d86:	f004 fc93 	bl	80056b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fd7f 	bl	800088c <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d9c:	08005840 	.word	0x08005840
  ldr r2, =_sbss
 8000da0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000da4:	200015c4 	.word	0x200015c4

08000da8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f8de 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000dbc:	f001 f918 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_Init+0x3c>)
 8000dc4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff fec4 	bl	8000b54 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fe6d 	bl	8000ab6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000000 	.word	0x20000000

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20001580 	.word	0x20001580

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20001580 	.word	0x20001580

08000e24 <__NVIC_SetPriorityGrouping>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4906      	ldr	r1, [pc, #24]	; (8000ebc <__NVIC_EnableIRQ+0x34>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff4f 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff66 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ffb4 	bl	8000f14 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff83 	bl	8000ec0 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff59 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	58000400 	.word	0x58000400

08000ffc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_PWREx_GetVoltageRange+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	58000400 	.word	0x58000400

08001014 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001024:	d101      	bne.n	800102a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	58000400 	.word	0x58000400

08001038 <LL_RCC_HSE_EnableTcxo>:
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <LL_RCC_HSE_DisableTcxo>:
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001082:	d101      	bne.n	8001088 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <LL_RCC_HSE_Enable>:
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <LL_RCC_HSE_Disable>:
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <LL_RCC_HSE_IsReady>:
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010dc:	d101      	bne.n	80010e2 <LL_RCC_HSE_IsReady+0x18>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_RCC_HSE_IsReady+0x1a>
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LL_RCC_HSI_Enable>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <LL_RCC_HSI_Disable>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <LL_RCC_HSI_IsReady>:
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d101      	bne.n	800113c <LL_RCC_HSI_IsReady+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_RCC_HSI_IsReady+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <LL_RCC_LSE_IsReady>:
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d101      	bne.n	8001186 <LL_RCC_LSE_IsReady+0x18>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_RCC_LSE_IsReady+0x1a>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <LL_RCC_LSI_Enable>:
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <LL_RCC_LSI_Disable>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_LSI_IsReady>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d101      	bne.n	80011e8 <LL_RCC_LSI_IsReady+0x18>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <LL_RCC_LSI_IsReady+0x1a>
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <LL_RCC_MSI_Enable>:
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <LL_RCC_MSI_Disable>:
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_MSI_IsReady>:
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b02      	cmp	r3, #2
 800123a:	d101      	bne.n	8001240 <LL_RCC_MSI_IsReady+0x16>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_RCC_MSI_IsReady+0x18>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b08      	cmp	r3, #8
 800125a:	d101      	bne.n	8001260 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <LL_RCC_MSI_GetRange>:
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_SetSysClkSource>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <LL_RCC_GetSysClkSource>:
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <LL_RCC_SetAHBPrescaler>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <LL_RCC_SetAHB3Prescaler>:
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001332:	f023 020f 	bic.w	r2, r3, #15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133e:	4313      	orrs	r3, r2
 8001340:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <LL_RCC_SetAPB1Prescaler>:
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <LL_RCC_SetAPB2Prescaler>:
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <LL_RCC_GetAHBPrescaler>:
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <LL_RCC_GetAHB3Prescaler>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_GetAPB1Prescaler>:
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <LL_RCC_GetAPB2Prescaler>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001440:	d101      	bne.n	8001446 <LL_RCC_PLL_IsReady+0x18>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_RCC_PLL_IsReady+0x1a>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0303 	and.w	r3, r3, #3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014bc:	d101      	bne.n	80014c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d101      	bne.n	80014e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001502:	d101      	bne.n	8001508 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001524:	d101      	bne.n	800152a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e38a      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001546:	f7ff fece 	bl	80012e6 <LL_RCC_GetSysClkSource>
 800154a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154c:	f7ff ffa2 	bl	8001494 <LL_RCC_PLL_GetMainSource>
 8001550:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80c9 	beq.w	80016f2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x3e>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d17b      	bne.n	8001664 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d178      	bne.n	8001664 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	f7ff fe5a 	bl	800122a <LL_RCC_MSI_IsReady>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x54>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e369      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x72>
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a4:	e006      	b.n	80015b4 <HAL_RCC_OscConfig+0x80>
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d222      	bcs.n	80015fe <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd71 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e347      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe4e 	bl	8001298 <LL_RCC_MSI_SetCalibTrimming>
 80015fc:	e021      	b.n	8001642 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe35 	bl	8001298 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd36 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e30c      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001642:	f000 fcd5 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8001646:	4603      	mov	r3, r0
 8001648:	4ab4      	ldr	r2, [pc, #720]	; (800191c <HAL_RCC_OscConfig+0x3e8>)
 800164a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800164c:	4bb4      	ldr	r3, [pc, #720]	; (8001920 <HAL_RCC_OscConfig+0x3ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fa7f 	bl	8000b54 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800165a:	7cfb      	ldrb	r3, [r7, #19]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d047      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	e2fb      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d02c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800166c:	f7ff fdc1 	bl	80011f2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001670:	f7ff fbce 	bl	8000e10 <HAL_GetTick>
 8001674:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff fbca 	bl	8000e10 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e2e8      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800168a:	f7ff fdce 	bl	800122a <LL_RCC_MSI_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdea 	bl	8001298 <LL_RCC_MSI_SetCalibTrimming>
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016c6:	f7ff fda2 	bl	800120e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fba1 	bl	8000e10 <HAL_GetTick>
 80016ce:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb9d 	bl	8000e10 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e2bb      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80016e4:	f7ff fda1 	bl	800122a <LL_RCC_MSI_IsReady>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCC_OscConfig+0x19e>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d05f      	beq.n	80017be <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x1dc>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d10a      	bne.n	8001726 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	f7ff fcdb 	bl	80010ca <LL_RCC_HSE_IsReady>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d050      	beq.n	80017bc <HAL_RCC_OscConfig+0x288>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d14c      	bne.n	80017bc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e29a      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x218>
 8001746:	f7ff fca4 	bl	8001092 <LL_RCC_HSE_Enable>
 800174a:	e00d      	b.n	8001768 <HAL_RCC_OscConfig+0x234>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001754:	d104      	bne.n	8001760 <HAL_RCC_OscConfig+0x22c>
 8001756:	f7ff fc6f 	bl	8001038 <LL_RCC_HSE_EnableTcxo>
 800175a:	f7ff fc9a 	bl	8001092 <LL_RCC_HSE_Enable>
 800175e:	e003      	b.n	8001768 <HAL_RCC_OscConfig+0x234>
 8001760:	f7ff fca5 	bl	80010ae <LL_RCC_HSE_Disable>
 8001764:	f7ff fc76 	bl	8001054 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fb4e 	bl	8000e10 <HAL_GetTick>
 8001774:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb4a 	bl	8000e10 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e268      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800178a:	f7ff fc9e 	bl	80010ca <LL_RCC_HSE_IsReady>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f1      	beq.n	8001778 <HAL_RCC_OscConfig+0x244>
 8001794:	e013      	b.n	80017be <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fb3b 	bl	8000e10 <HAL_GetTick>
 800179a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fb37 	bl	8000e10 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e255      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80017b0:	f7ff fc8b 	bl	80010ca <LL_RCC_HSE_IsReady>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x26a>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d04b      	beq.n	8001862 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x2a8>
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d113      	bne.n	80017fe <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d110      	bne.n	80017fe <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	f7ff fca2 	bl	8001124 <LL_RCC_HSI_IsReady>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2be>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e234      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fca5 	bl	8001146 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	e031      	b.n	8001862 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	f7ff fc71 	bl	80010ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fb01 	bl	8000e10 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fafd 	bl	8000e10 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e21b      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001824:	f7ff fc7e 	bl	8001124 <LL_RCC_HSI_IsReady>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f1      	beq.n	8001812 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc87 	bl	8001146 <LL_RCC_HSI_SetCalibTrimming>
 8001838:	e013      	b.n	8001862 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183a:	f7ff fc65 	bl	8001108 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fae7 	bl	8000e10 <HAL_GetTick>
 8001842:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fae3 	bl	8000e10 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e201      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001858:	f7ff fc64 	bl	8001124 <LL_RCC_HSI_IsReady>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f1      	bne.n	8001846 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d06e      	beq.n	800194c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d056      	beq.n	8001924 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	429a      	cmp	r2, r3
 800188c:	d031      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1da      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80018b0:	f7ff fc7e 	bl	80011b0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b4:	f7ff faac 	bl	8000e10 <HAL_GetTick>
 80018b8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff faa8 	bl	8000e10 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b11      	cmp	r3, #17
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1c6      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80018ce:	f7ff fc7f 	bl	80011d0 <LL_RCC_LSI_IsReady>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f1      	bne.n	80018bc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	f023 0210 	bic.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ec:	4313      	orrs	r3, r2
 80018ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	f7ff fc4d 	bl	8001190 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fa8b 	bl	8000e10 <HAL_GetTick>
 80018fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa87 	bl	8000e10 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b11      	cmp	r3, #17
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1a5      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001910:	f7ff fc5e 	bl	80011d0 <LL_RCC_LSI_IsReady>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f1      	beq.n	80018fe <HAL_RCC_OscConfig+0x3ca>
 800191a:	e017      	b.n	800194c <HAL_RCC_OscConfig+0x418>
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	f7ff fc44 	bl	80011b0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fa72 	bl	8000e10 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fa6e 	bl	8000e10 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b11      	cmp	r3, #17
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e18c      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001942:	f7ff fc45 	bl	80011d0 <LL_RCC_LSI_IsReady>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f1      	bne.n	8001930 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80d8 	beq.w	8001b0a <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800195a:	f7ff fb5b 	bl	8001014 <LL_PWR_IsEnabledBkUpAccess>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d113      	bne.n	800198c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001964:	f7ff fb3c 	bl	8000fe0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001968:	f7ff fa52 	bl	8000e10 <HAL_GetTick>
 800196c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7ff fa4e 	bl	8000e10 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e16c      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001982:	f7ff fb47 	bl	8001014 <LL_PWR_IsEnabledBkUpAccess>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f1      	beq.n	8001970 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d07b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b85      	cmp	r3, #133	; 0x85
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fa2a 	bl	8000e10 <HAL_GetTick>
 80019bc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff fa1c 	bl	8000e10 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e138      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80019ea:	f7ff fbc0 	bl	800116e <LL_RCC_LSE_IsReady>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b81      	cmp	r3, #129	; 0x81
 80019fa:	d003      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b85      	cmp	r3, #133	; 0x85
 8001a02:	d121      	bne.n	8001a48 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa04 	bl	8000e10 <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f9f6 	bl	8000e10 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e112      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ec      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001a46:	e060      	b.n	8001b0a <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9e2 	bl	8000e10 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f9d4 	bl	8000e10 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0f0      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ec      	bne.n	8001a64 <HAL_RCC_OscConfig+0x530>
 8001a8a:	e03e      	b.n	8001b0a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f9c0 	bl	8000e10 <HAL_GetTick>
 8001a90:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f9b2 	bl	8000e10 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0ce      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ec      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff f99f 	bl	8000e10 <HAL_GetTick>
 8001ad2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f991 	bl	8000e10 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0ad      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b00:	f7ff fb35 	bl	800116e <LL_RCC_LSE_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a3 	beq.w	8001c5a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d076      	beq.n	8001c08 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d14b      	bne.n	8001bba <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	f7ff fc76 	bl	8001412 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f973 	bl	8000e10 <HAL_GetTick>
 8001b2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff f96f 	bl	8000e10 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b0a      	cmp	r3, #10
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e08d      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b40:	f7ff fc75 	bl	800142e <LL_RCC_PLL_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f1      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <HAL_RCC_OscConfig+0x730>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b76:	430a      	orrs	r2, r1
 8001b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	f7ff fc39 	bl	80013f6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f93c 	bl	8000e10 <HAL_GetTick>
 8001b98:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f938 	bl	8000e10 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e056      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001bae:	f7ff fc3e 	bl	800142e <LL_RCC_PLL_IsReady>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f1      	beq.n	8001b9c <HAL_RCC_OscConfig+0x668>
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	f7ff fc2a 	bl	8001412 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc8:	f023 0303 	bic.w	r3, r3, #3
 8001bcc:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be0:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff f915 	bl	8000e10 <HAL_GetTick>
 8001be6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff f911 	bl	8000e10 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b0a      	cmp	r3, #10
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e02f      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001bfc:	f7ff fc17 	bl	800142e <LL_RCC_PLL_IsReady>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x6b6>
 8001c06:	e028      	b.n	8001c5a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e023      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0203 	and.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10e      	bne.n	8001c56 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	11c1808c 	.word	0x11c1808c

08001c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e10f      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b89      	ldr	r3, [pc, #548]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d91b      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b86      	ldr	r3, [pc, #536]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4984      	ldr	r1, [pc, #528]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9a:	f7ff f8b9 	bl	8000e10 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ca2:	f7ff f8b5 	bl	8000e10 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0f3      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d1ef      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fb12 	bl	80012fc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f89a 	bl	8000e10 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ce0:	f7ff f896 	bl	8000e10 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0d4      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cf2:	f7ff fbda 	bl	80014aa <LL_RCC_IsActiveFlag_HPRE>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f1      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d016      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fb08 	bl	8001322 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d12:	f7ff f87d 	bl	8000e10 <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d1a:	f7ff f879 	bl	8000e10 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0b7      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d2c:	f7ff fbce 	bl	80014cc <LL_RCC_IsActiveFlag_SHDHPRE>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f1      	beq.n	8001d1a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fb01 	bl	800134e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f860 	bl	8000e10 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d54:	f7ff f85c 	bl	8000e10 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e09a      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d66:	f7ff fbc3 	bl	80014f0 <LL_RCC_IsActiveFlag_PPRE1>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f1      	beq.n	8001d54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d017      	beq.n	8001dac <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff faf6 	bl	8001374 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d88:	f7ff f842 	bl	8000e10 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d90:	f7ff f83e 	bl	8000e10 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e07c      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001da2:	f7ff fbb6 	bl	8001512 <LL_RCC_IsActiveFlag_PPRE2>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f1      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d043      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001dc0:	f7ff f983 	bl	80010ca <LL_RCC_HSE_IsReady>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11e      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e066      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001dd6:	f7ff fb2a 	bl	800142e <LL_RCC_PLL_IsReady>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d113      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e05b      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001dec:	f7ff fa1d 	bl	800122a <LL_RCC_MSI_IsReady>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e050      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001dfa:	f7ff f993 	bl	8001124 <LL_RCC_HSI_IsReady>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e049      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa57 	bl	80012c0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e12:	f7fe fffd 	bl	8000e10 <HAL_GetTick>
 8001e16:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7fe fff9 	bl	8000e10 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e035      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	f7ff fa59 	bl	80012e6 <LL_RCC_GetSysClkSource>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d21b      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4913      	ldr	r1, [pc, #76]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5e:	f7fe ffd7 	bl	8000e10 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e66:	f7fe ffd3 	bl	8000e10 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e011      	b.n	8001e9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x23c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e86:	f000 f8b3 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_RCC_ClockConfig+0x240>)
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_ClockConfig+0x244>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fe5d 	bl	8000b54 <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58004000 	.word	0x58004000
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	f7ff fa12 	bl	80012e6 <LL_RCC_GetSysClkSource>
 8001ec2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	f7ff fae6 	bl	8001494 <LL_RCC_PLL_GetMainSource>
 8001ec8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d139      	bne.n	8001f4a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d136      	bne.n	8001f4a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001edc:	f7ff f9b5 	bl	800124a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x62>
 8001ee6:	f7ff f9b0 	bl	800124a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x4e>
 8001ef0:	f7ff f9bb 	bl	800126a <LL_RCC_MSI_GetRange>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	e005      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x5a>
 8001efe:	f7ff f9bf 	bl	8001280 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f02:	4603      	mov	r3, r0
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x8c>
 8001f12:	f7ff f99a 	bl	800124a <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x7a>
 8001f1c:	f7ff f9a5 	bl	800126a <LL_RCC_MSI_GetRange>
 8001f20:	4603      	mov	r3, r0
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x86>
 8001f2a:	f7ff f9a9 	bl	8001280 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d115      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f48:	e012      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e00c      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d109      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f5c:	f7ff f888 	bl	8001070 <LL_RCC_HSE_IsEnabledDiv2>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e001      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f6e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	f7ff f9b9 	bl	80012e6 <LL_RCC_GetSysClkSource>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d12f      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f7a:	f7ff fa8b 	bl	8001494 <LL_RCC_PLL_GetMainSource>
 8001f7e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0xde>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d003      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xe4>
 8001f8c:	e00d      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f90:	60fb      	str	r3, [r7, #12]
        break;
 8001f92:	e00d      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f94:	f7ff f86c 	bl	8001070 <LL_RCC_HSE_IsEnabledDiv2>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fa0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fa6:	60fb      	str	r3, [r7, #12]
        break;
 8001fa8:	e002      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	60fb      	str	r3, [r7, #12]
        break;
 8001fae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001fb0:	f7ff fa4e 	bl	8001450 <LL_RCC_PLL_GetN>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	fb03 f402 	mul.w	r4, r3, r2
 8001fbc:	f7ff fa5f 	bl	800147e <LL_RCC_PLL_GetDivider>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001fca:	f7ff fa4d 	bl	8001468 <LL_RCC_PLL_GetR>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	0f5b      	lsrs	r3, r3, #29
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fd8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001fda:	697b      	ldr	r3, [r7, #20]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	080057f8 	.word	0x080057f8
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	01e84800 	.word	0x01e84800

08001ff0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b598      	push	{r3, r4, r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ff4:	f7ff ff5c 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	f7ff f9ce 	bl	800139a <LL_RCC_GetAHBPrescaler>
 8001ffe:	4603      	mov	r3, r0
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_RCC_GetHCLKFreq+0x24>)
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd98      	pop	{r3, r4, r7, pc}
 8002014:	08005798 	.word	0x08005798

08002018 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b598      	push	{r3, r4, r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800201c:	f7ff ffe8 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002020:	4604      	mov	r4, r0
 8002022:	f7ff f9dd 	bl	80013e0 <LL_RCC_GetAPB2Prescaler>
 8002026:	4603      	mov	r3, r0
 8002028:	0adb      	lsrs	r3, r3, #11
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd98      	pop	{r3, r4, r7, pc}
 8002038:	080057d8 	.word	0x080057d8

0800203c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d024      	beq.n	8002096 <HAL_RCC_GetClockConfig+0x5a>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d021      	beq.n	8002096 <HAL_RCC_GetClockConfig+0x5a>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	224f      	movs	r2, #79	; 0x4f
 8002056:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002058:	f7ff f945 	bl	80012e6 <LL_RCC_GetSysClkSource>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002062:	f7ff f99a 	bl	800139a <LL_RCC_GetAHBPrescaler>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800206c:	f7ff f9ad 	bl	80013ca <LL_RCC_GetAPB1Prescaler>
 8002070:	4602      	mov	r2, r0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002076:	f7ff f9b3 	bl	80013e0 <LL_RCC_GetAPB2Prescaler>
 800207a:	4602      	mov	r2, r0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 8002080:	f7ff f996 	bl	80013b0 <LL_RCC_GetAHB3Prescaler>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetClockConfig+0x64>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	601a      	str	r2, [r3, #0]
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	58004000 	.word	0x58004000

080020a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80020bc:	f7ff f978 	bl	80013b0 <LL_RCC_GetAHB3Prescaler>
 80020c0:	4603      	mov	r3, r0
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4a09      	ldr	r2, [pc, #36]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9c      	lsrs	r4, r3, #18
 80020e0:	f7fe ff8c 	bl	8000ffc <HAL_PWREx_GetVoltageRange>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 f80b 	bl	8002104 <RCC_SetFlashLatency>
 80020ee:	4603      	mov	r3, r0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	080057f8 	.word	0x080057f8
 80020fc:	08005798 	.word	0x08005798
 8002100:	431bde83 	.word	0x431bde83

08002104 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	; 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800210e:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <RCC_SetFlashLatency+0xfc>)
 8002110:	f107 0320 	add.w	r3, r7, #32
 8002114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002118:	6018      	str	r0, [r3, #0]
 800211a:	3304      	adds	r3, #4
 800211c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800211e:	4a39      	ldr	r2, [pc, #228]	; (8002204 <RCC_SetFlashLatency+0x100>)
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002128:	6018      	str	r0, [r3, #0]
 800212a:	3304      	adds	r3, #4
 800212c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800212e:	4a36      	ldr	r2, [pc, #216]	; (8002208 <RCC_SetFlashLatency+0x104>)
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	ca07      	ldmia	r2, {r0, r1, r2}
 8002136:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002144:	d11d      	bne.n	8002182 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002146:	2300      	movs	r3, #0
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 800214a:	e016      	b.n	800217a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002154:	4413      	add	r3, r2
 8002156:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4293      	cmp	r3, r2
 8002160:	d808      	bhi.n	8002174 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800216a:	4413      	add	r3, r2
 800216c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002172:	e023      	b.n	80021bc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	3301      	adds	r3, #1
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2b02      	cmp	r3, #2
 800217e:	d9e5      	bls.n	800214c <RCC_SetFlashLatency+0x48>
 8002180:	e01c      	b.n	80021bc <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002186:	e016      	b.n	80021b6 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002190:	4413      	add	r3, r2
 8002192:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4293      	cmp	r3, r2
 800219c:	d808      	bhi.n	80021b0 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a6:	4413      	add	r3, r2
 80021a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80021ae:	e005      	b.n	80021bc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	3301      	adds	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d9e5      	bls.n	8002188 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <RCC_SetFlashLatency+0x108>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4911      	ldr	r1, [pc, #68]	; (800220c <RCC_SetFlashLatency+0x108>)
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80021cc:	f7fe fe20 	bl	8000e10 <HAL_GetTick>
 80021d0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021d2:	e008      	b.n	80021e6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021d4:	f7fe fe1c 	bl	8000e10 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e007      	b.n	80021f6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <RCC_SetFlashLatency+0x108>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1ef      	bne.n	80021d4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3738      	adds	r7, #56	; 0x38
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08005764 	.word	0x08005764
 8002204:	0800576c 	.word	0x0800576c
 8002208:	08005774 	.word	0x08005774
 800220c:	58004000 	.word	0x58004000

08002210 <LL_RCC_LSE_IsReady>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d101      	bne.n	8002228 <LL_RCC_LSE_IsReady+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_RCC_LSE_IsReady+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <LL_RCC_SetUSARTClockSource>:
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	43db      	mvns	r3, r3
 8002248:	401a      	ands	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <LL_RCC_SetI2SClockSource>:
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <LL_RCC_SetLPUARTClockSource>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_SetI2CClockSource>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022ce:	43db      	mvns	r3, r3
 80022d0:	401a      	ands	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80022da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_SetLPTIMClockSource>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <LL_RCC_SetRNGClockSource>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_SetADCClockSource>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800235e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <LL_RCC_SetRTCClockSource>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <LL_RCC_GetRTCClockSource>:
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_ForceBackupDomainReset>:
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002404:	2300      	movs	r3, #0
 8002406:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002408:	2300      	movs	r3, #0
 800240a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d058      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002418:	f7fe fde2 	bl	8000fe0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800241c:	f7fe fcf8 	bl	8000e10 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002422:	e009      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fcf4 	bl	8000e10 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d902      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	74fb      	strb	r3, [r7, #19]
        break;
 8002436:	e006      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d1ee      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d13c      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800244c:	f7ff ffa7 	bl	800239e <LL_RCC_GetRTCClockSource>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	429a      	cmp	r2, r3
 8002458:	d00f      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002466:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	f7ff ffa5 	bl	80023b6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800246c:	f7ff ffb3 	bl	80023d6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d014      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fcc4 	bl	8000e10 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe fcc0 	bl	8000e10 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d902      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	74fb      	strb	r3, [r7, #19]
            break;
 80024a2:	e004      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80024a4:	f7ff feb4 	bl	8002210 <LL_RCC_LSE_IsReady>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d1ee      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5b 	bl	8002374 <LL_RCC_SetRTCClockSource>
 80024be:	e004      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
 80024c4:	e001      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fea9 	bl	8002232 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fe9e 	bl	8002232 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fec0 	bl	800228c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fee6 	bl	80022ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fedb 	bl	80022ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fed0 	bl	80022ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fea9 	bl	80022b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe9e 	bl	80022b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fe93 	bl	80022b6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d011      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe5e 	bl	8002262 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ae:	d107      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d010      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fea5 	bl	8002320 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d011      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fea3 	bl	800234a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800260c:	d107      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800261e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	58000400 	.word	0x58000400

0800262c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d068      	beq.n	8002710 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fa3a 	bl	8000acc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RTC_Init+0xf0>)
 8002662:	22ca      	movs	r2, #202	; 0xca
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RTC_Init+0xf0>)
 8002668:	2253      	movs	r2, #83	; 0x53
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f87d 	bl	800276c <RTC_EnterInitMode>
 8002672:	4603      	mov	r3, r0
 8002674:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13f      	bne.n	80026fc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RTC_Init+0xf0>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_RTC_Init+0xf0>)
 8002682:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RTC_Init+0xf0>)
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4319      	orrs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	430b      	orrs	r3, r1
 80026a0:	491e      	ldr	r1, [pc, #120]	; (800271c <HAL_RTC_Init+0xf0>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	491a      	ldr	r1, [pc, #104]	; (800271c <HAL_RTC_Init+0xf0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RTC_Init+0xf0>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	430b      	orrs	r3, r1
 80026c8:	4914      	ldr	r1, [pc, #80]	; (800271c <HAL_RTC_Init+0xf0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f880 	bl	80027d4 <RTC_ExitInitMode>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10e      	bne.n	80026fc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RTC_Init+0xf0>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a19      	ldr	r1, [r3, #32]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4319      	orrs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	4909      	ldr	r1, [pc, #36]	; (800271c <HAL_RTC_Init+0xf0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_RTC_Init+0xf0>)
 80026fe:	22ff      	movs	r2, #255	; 0xff
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40002800 	.word	0x40002800

08002720 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_RTC_WaitForSynchro+0x48>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_RTC_WaitForSynchro+0x48>)
 800272e:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8002732:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002734:	f7fe fb6c 	bl	8000e10 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800273a:	e009      	b.n	8002750 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800273c:	f7fe fb68 	bl	8000e10 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800274a:	d901      	bls.n	8002750 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e006      	b.n	800275e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RTC_WaitForSynchro+0x48>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40002800 	.word	0x40002800

0800276c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <RTC_EnterInitMode+0x64>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d120      	bne.n	80027c6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <RTC_EnterInitMode+0x64>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <RTC_EnterInitMode+0x64>)
 800278a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8002790:	f7fe fb3e 	bl	8000e10 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002796:	e00d      	b.n	80027b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002798:	f7fe fb3a 	bl	8000e10 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a6:	d905      	bls.n	80027b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <RTC_EnterInitMode+0x64>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <RTC_EnterInitMode+0x5a>
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d1e8      	bne.n	8002798 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40002800 	.word	0x40002800

080027d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <RTC_ExitInitMode+0x78>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <RTC_ExitInitMode+0x78>)
 80027e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <RTC_ExitInitMode+0x78>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10c      	bne.n	8002812 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff91 	bl	8002720 <HAL_RTC_WaitForSynchro>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01e      	beq.n	8002842 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e017      	b.n	8002842 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <RTC_ExitInitMode+0x78>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	4a0d      	ldr	r2, [pc, #52]	; (800284c <RTC_ExitInitMode+0x78>)
 8002818:	f023 0320 	bic.w	r3, r3, #32
 800281c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff7e 	bl	8002720 <HAL_RTC_WaitForSynchro>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <RTC_ExitInitMode+0x78>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4a04      	ldr	r2, [pc, #16]	; (800284c <RTC_ExitInitMode+0x78>)
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40002800 	.word	0x40002800

08002850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e049      	b.n	80028f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f841 	bl	80028fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 f9ce 	bl	8002c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e036      	b.n	8002996 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d004      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x44>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d115      	bne.n	8002980 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_TIM_Base_Start_IT+0x94>)
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b06      	cmp	r3, #6
 8002964:	d015      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d011      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297e:	e008      	b.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e000      	b.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002992:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	00010007 	.word	0x00010007

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0202 	mvn.w	r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f904 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8f7 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f906 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8da 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8cd 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f8dc 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0208 	mvn.w	r2, #8
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8b0 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8a3 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f8b2 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f886 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f879 	bl	8002be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f888 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd ff86 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8d7 	bl	8002d06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d10e      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8c9 	bl	8002d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d10e      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d107      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f835 	bl	8002c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d10e      	bne.n	8002bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0220 	mvn.w	r2, #32
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f88b 	bl	8002cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
	...

08002c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <TIM_Base_SetConfig+0xb8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x20>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <TIM_Base_SetConfig+0xb8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <TIM_Base_SetConfig+0xbc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0x52>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <TIM_Base_SetConfig+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <TIM_Base_SetConfig+0xb8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0xa0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <TIM_Base_SetConfig+0xbc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0xa0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <TIM_Base_SetConfig+0xc0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40014400 	.word	0x40014400
 8002cf0:	40014800 	.word	0x40014800

08002cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3c:	2b84      	cmp	r3, #132	; 0x84
 8002d3e:	d005      	beq.n	8002d4c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	3303      	adds	r3, #3
 8002d4a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d5c:	f000 ffc4 	bl	8003ce8 <vTaskStartScheduler>
  
  return osOK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d68:	b089      	sub	sp, #36	; 0x24
 8002d6a:	af04      	add	r7, sp, #16
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <osThreadCreate+0x54>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685c      	ldr	r4, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681d      	ldr	r5, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691e      	ldr	r6, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffc9 	bl	8002d2a <makeFreeRtosPriority>
 8002d98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002da2:	9202      	str	r2, [sp, #8]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	9100      	str	r1, [sp, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4632      	mov	r2, r6
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 fdca 	bl	8003948 <xTaskCreateStatic>
 8002db4:	4603      	mov	r3, r0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e01c      	b.n	8002df4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685c      	ldr	r4, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dc6:	b29e      	uxth	r6, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffab 	bl	8002d2a <makeFreeRtosPriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	9200      	str	r2, [sp, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4632      	mov	r2, r6
 8002de2:	4629      	mov	r1, r5
 8002de4:	4620      	mov	r0, r4
 8002de6:	f000 fe0c 	bl	8003a02 <xTaskCreate>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002df4:	68fb      	ldr	r3, [r7, #12]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <osDelay+0x16>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	e000      	b.n	8002e16 <osDelay+0x18>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 ff32 	bl	8003c80 <vTaskDelay>
  
  return osOK;
 8002e1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f103 0208 	add.w	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f103 0208 	add.w	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d103      	bne.n	8002ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e00c      	b.n	8002efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e002      	b.n	8002ef0 <vListInsert+0x2e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d2f6      	bcs.n	8002eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6852      	ldr	r2, [r2, #4]
 8002f52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d103      	bne.n	8002f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <xQueueGenericReset+0x2a>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	60bb      	str	r3, [r7, #8]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fae:	f002 f8e5 	bl	800517c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	441a      	add	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22ff      	movs	r2, #255	; 0xff
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d114      	bne.n	800302e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01a      	beq.n	8003042 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3310      	adds	r3, #16
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f977 	bl	8004304 <xTaskRemoveFromEventList>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <xQueueGenericReset+0xcc>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	e009      	b.n	8003042 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3310      	adds	r3, #16
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fef7 	bl	8002e26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3324      	adds	r3, #36	; 0x24
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fef2 	bl	8002e26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003042:	f002 f8cb 	bl	80051dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <xQueueGenericCreateStatic+0x52>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <xQueueGenericCreateStatic+0x56>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueGenericCreateStatic+0x58>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	623b      	str	r3, [r7, #32]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <xQueueGenericCreateStatic+0x7e>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueGenericCreateStatic+0x82>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueGenericCreateStatic+0x84>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61fb      	str	r3, [r7, #28]
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030f2:	2348      	movs	r3, #72	; 0x48
 80030f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b48      	cmp	r3, #72	; 0x48
 80030fa:	d00a      	beq.n	8003112 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	61bb      	str	r3, [r7, #24]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003112:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003126:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f805 	bl	8003144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800313c:	4618      	mov	r0, r3
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e002      	b.n	8003166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003172:	2101      	movs	r1, #1
 8003174:	69b8      	ldr	r0, [r7, #24]
 8003176:	f7ff ff05 	bl	8002f84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueGenericSend+0x32>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <xQueueGenericSend+0x40>
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueGenericSend+0x44>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueGenericSend+0x46>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueGenericSend+0x60>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSend+0x6e>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <xQueueGenericSend+0x72>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <xQueueGenericSend+0x74>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericSend+0x8e>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	623b      	str	r3, [r7, #32]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003212:	f001 fa8b 	bl	800472c <xTaskGetSchedulerState>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <xQueueGenericSend+0x9e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xQueueGenericSend+0xa2>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericSend+0xa4>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericSend+0xbe>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61fb      	str	r3, [r7, #28]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003242:	f001 ff9b 	bl	800517c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <xQueueGenericSend+0xd4>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d129      	bne.n	80032ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325e:	f000 fa07 	bl	8003670 <prvCopyDataToQueue>
 8003262:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	4618      	mov	r0, r3
 8003272:	f001 f847 	bl	8004304 <xTaskRemoveFromEventList>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <xQueueGenericSend+0x1f8>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	e00a      	b.n	80032a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b39      	ldr	r3, [pc, #228]	; (800337c <xQueueGenericSend+0x1f8>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032a4:	f001 ff9a 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e063      	b.n	8003374 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032b2:	f001 ff93 	bl	80051dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e05c      	b.n	8003374 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f881 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ce:	f001 ff85 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032d2:	f000 fd6f 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d6:	f001 ff51 	bl	800517c <vPortEnterCritical>
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d103      	bne.n	80032f0 <xQueueGenericSend+0x16c>
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f6:	b25b      	sxtb	r3, r3
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d103      	bne.n	8003306 <xQueueGenericSend+0x182>
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003306:	f001 ff69 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800330a:	1d3a      	adds	r2, r7, #4
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f870 	bl	80043f8 <xTaskCheckForTimeOut>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d124      	bne.n	8003368 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800331e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003320:	f000 fa9e 	bl	8003860 <prvIsQueueFull>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 ff96 	bl	8004264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333a:	f000 fa29 	bl	8003790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800333e:	f000 fd81 	bl	8003e44 <xTaskResumeAll>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f af7c 	bne.w	8003242 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <xQueueGenericSend+0x1f8>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	e772      	b.n	8003242 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800335c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335e:	f000 fa17 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003362:	f000 fd6f 	bl	8003e44 <xTaskResumeAll>
 8003366:	e76c      	b.n	8003242 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa11 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800336e:	f000 fd69 	bl	8003e44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003374:	4618      	mov	r0, r3
 8003376:	3738      	adds	r7, #56	; 0x38
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <xQueueGenericSendFromISR+0x3c>
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueGenericSendFromISR+0x40>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xQueueGenericSendFromISR+0x42>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	623b      	str	r3, [r7, #32]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d103      	bne.n	80033ea <xQueueGenericSendFromISR+0x6a>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <xQueueGenericSendFromISR+0x6e>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueGenericSendFromISR+0x70>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	61fb      	str	r3, [r7, #28]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800340a:	f001 ff35 	bl	8005278 <vPortValidateInterruptPriority>
	__asm volatile
 800340e:	f3ef 8211 	mrs	r2, BASEPRI
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003426:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <xQueueGenericSendFromISR+0xbc>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d12c      	bne.n	8003496 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800344c:	f000 f910 	bl	8003670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003450:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d112      	bne.n	8003480 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	3324      	adds	r3, #36	; 0x24
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff4c 	bl	8004304 <xTaskRemoveFromEventList>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00e      	beq.n	8003490 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e007      	b.n	8003490 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003484:	3301      	adds	r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	b25a      	sxtb	r2, r3
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003490:	2301      	movs	r3, #1
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003494:	e001      	b.n	800349a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003496:	2300      	movs	r3, #0
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f383 8811 	msr	BASEPRI, r3
}
 80034a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3738      	adds	r7, #56	; 0x38
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <xQueueReceive+0x30>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	623b      	str	r3, [r7, #32]
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <xQueueReceive+0x3e>
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <xQueueReceive+0x42>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueReceive+0x44>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueReceive+0x5e>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61fb      	str	r3, [r7, #28]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800350e:	f001 f90d 	bl	800472c <xTaskGetSchedulerState>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <xQueueReceive+0x6e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueReceive+0x72>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueReceive+0x74>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueReceive+0x8e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61bb      	str	r3, [r7, #24]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800353e:	f001 fe1d 	bl	800517c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01f      	beq.n	800358e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003552:	f000 f8f7 	bl	8003744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	3310      	adds	r3, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f000 feca 	bl	8004304 <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <xQueueReceive+0x1bc>)
 8003578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003586:	f001 fe29 	bl	80051dc <vPortExitCritical>
				return pdPASS;
 800358a:	2301      	movs	r3, #1
 800358c:	e069      	b.n	8003662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003594:	f001 fe22 	bl	80051dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003598:	2300      	movs	r3, #0
 800359a:	e062      	b.n	8003662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035a2:	f107 0310 	add.w	r3, r7, #16
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff10 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035b0:	f001 fe14 	bl	80051dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035b4:	f000 fbfe 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035b8:	f001 fde0 	bl	800517c <vPortEnterCritical>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d103      	bne.n	80035d2 <xQueueReceive+0x122>
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d103      	bne.n	80035e8 <xQueueReceive+0x138>
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e8:	f001 fdf8 	bl	80051dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ec:	1d3a      	adds	r2, r7, #4
 80035ee:	f107 0310 	add.w	r3, r7, #16
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 feff 	bl	80043f8 <xTaskCheckForTimeOut>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d123      	bne.n	8003648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003602:	f000 f917 	bl	8003834 <prvIsQueueEmpty>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fe25 	bl	8004264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800361a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361c:	f000 f8b8 	bl	8003790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003620:	f000 fc10 	bl	8003e44 <xTaskResumeAll>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d189      	bne.n	800353e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <xQueueReceive+0x1bc>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	e780      	b.n	800353e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800363c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363e:	f000 f8a7 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003642:	f000 fbff 	bl	8003e44 <xTaskResumeAll>
 8003646:	e77a      	b.n	800353e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364a:	f000 f8a1 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800364e:	f000 fbf9 	bl	8003e44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003654:	f000 f8ee 	bl	8003834 <prvIsQueueEmpty>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f43f af6f 	beq.w	800353e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003662:	4618      	mov	r0, r3
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d14d      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f864 	bl	8004768 <xTaskPriorityDisinherit>
 80036a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e043      	b.n	8003732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d119      	bne.n	80036e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6858      	ldr	r0, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	461a      	mov	r2, r3
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	f002 f81c 	bl	80056f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d32b      	bcc.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	e026      	b.n	8003732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68d8      	ldr	r0, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	461a      	mov	r2, r3
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	f002 f802 	bl	80056f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	425b      	negs	r3, r3
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	425b      	negs	r3, r3
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d105      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	3b01      	subs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800373a:	697b      	ldr	r3, [r7, #20]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d303      	bcc.n	8003778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68d9      	ldr	r1, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	461a      	mov	r2, r3
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f001 ffb8 	bl	80056f8 <memcpy>
	}
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003798:	f001 fcf0 	bl	800517c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a4:	e011      	b.n	80037ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fda6 	bl	8004304 <xTaskRemoveFromEventList>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037be:	f000 fe7d 	bl	80044bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dce9      	bgt.n	80037a6 <prvUnlockQueue+0x16>
 80037d2:	e000      	b.n	80037d6 <prvUnlockQueue+0x46>
					break;
 80037d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037de:	f001 fcfd 	bl	80051dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037e2:	f001 fccb 	bl	800517c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ee:	e011      	b.n	8003814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3310      	adds	r3, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd81 	bl	8004304 <xTaskRemoveFromEventList>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003808:	f000 fe58 	bl	80044bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	3b01      	subs	r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003818:	2b00      	cmp	r3, #0
 800381a:	dce9      	bgt.n	80037f0 <prvUnlockQueue+0x60>
 800381c:	e000      	b.n	8003820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800381e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003828:	f001 fcd8 	bl	80051dc <vPortExitCritical>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383c:	f001 fc9e 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fcc3 	bl	80051dc <vPortExitCritical>

	return xReturn;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003868:	f001 fc88 	bl	800517c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	429a      	cmp	r2, r3
 8003876:	d102      	bne.n	800387e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e001      	b.n	8003882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003882:	f001 fcab 	bl	80051dc <vPortExitCritical>

	return xReturn;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e014      	b.n	80038ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038ac:	490b      	ldr	r1, [pc, #44]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <vQueueAddToRegistry+0x4c>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038c2:	e006      	b.n	80038d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d9e7      	bls.n	80038a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20001584 	.word	0x20001584

080038e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038f0:	f001 fc44 	bl	800517c <vPortEnterCritical>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d103      	bne.n	800390a <vQueueWaitForMessageRestricted+0x2a>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003910:	b25b      	sxtb	r3, r3
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d103      	bne.n	8003920 <vQueueWaitForMessageRestricted+0x40>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003920:	f001 fc5c 	bl	80051dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3324      	adds	r3, #36	; 0x24
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fcb9 	bl	80042ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff28 	bl	8003790 <prvUnlockQueue>
	}
 8003940:	bf00      	nop
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08e      	sub	sp, #56	; 0x38
 800394c:	af04      	add	r7, sp, #16
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <xTaskCreateStatic+0x2a>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	623b      	str	r3, [r7, #32]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <xTaskCreateStatic+0x46>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61fb      	str	r3, [r7, #28]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800398e:	2354      	movs	r3, #84	; 0x54
 8003990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b54      	cmp	r3, #84	; 0x54
 8003996:	d00a      	beq.n	80039ae <xTaskCreateStatic+0x66>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01e      	beq.n	80039f4 <xTaskCreateStatic+0xac>
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ce:	2300      	movs	r3, #0
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9302      	str	r3, [sp, #8]
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f850 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ee:	f000 f8dd 	bl	8003bac <prvAddNewTaskToReadyList>
 80039f2:	e001      	b.n	80039f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039f8:	697b      	ldr	r3, [r7, #20]
	}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08c      	sub	sp, #48	; 0x30
 8003a06:	af04      	add	r7, sp, #16
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fc6c 	bl	80052f4 <pvPortMalloc>
 8003a1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a24:	2054      	movs	r0, #84	; 0x54
 8003a26:	f001 fc65 	bl	80052f4 <pvPortMalloc>
 8003a2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
 8003a38:	e005      	b.n	8003a46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f001 fd24 	bl	8005488 <vPortFree>
 8003a40:	e001      	b.n	8003a46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	2300      	movs	r3, #0
 8003a58:	9303      	str	r3, [sp, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	9302      	str	r3, [sp, #8]
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f80e 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a70:	69f8      	ldr	r0, [r7, #28]
 8003a72:	f000 f89b 	bl	8003bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	e002      	b.n	8003a82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a82:	69bb      	ldr	r3, [r7, #24]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	21a5      	movs	r1, #165	; 0xa5
 8003aa6:	f001 fe35 	bl	8005714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	617b      	str	r3, [r7, #20]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01f      	beq.n	8003b2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e012      	b.n	8003b16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	7819      	ldrb	r1, [r3, #0]
 8003af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	3334      	adds	r3, #52	; 0x34
 8003b00:	460a      	mov	r2, r1
 8003b02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2b0f      	cmp	r3, #15
 8003b1a:	d9e9      	bls.n	8003af0 <prvInitialiseNewTask+0x64>
 8003b1c:	e000      	b.n	8003b20 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b28:	e003      	b.n	8003b32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d901      	bls.n	8003b3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b38:	2306      	movs	r3, #6
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f986 	bl	8002e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff f981 	bl	8002e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	f1c3 0207 	rsb	r2, r3, #7
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	69b8      	ldr	r0, [r7, #24]
 8003b8c:	f001 fa08 	bl	8004fa0 <pxPortInitialiseStack>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba2:	bf00      	nop
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bb4:	f001 fae2 	bl	800517c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <prvAddNewTaskToReadyList+0xb8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <prvAddNewTaskToReadyList+0xb8>)
 8003bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bc2:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <prvAddNewTaskToReadyList+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bca:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <prvAddNewTaskToReadyList+0xbc>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd0:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <prvAddNewTaskToReadyList+0xb8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d110      	bne.n	8003bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bd8:	f000 fcea 	bl	80045b0 <prvInitialiseTaskLists>
 8003bdc:	e00d      	b.n	8003bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <prvAddNewTaskToReadyList+0xc0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <prvAddNewTaskToReadyList+0xbc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d802      	bhi.n	8003bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <prvAddNewTaskToReadyList+0xbc>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <prvAddNewTaskToReadyList+0xc4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <prvAddNewTaskToReadyList+0xc4>)
 8003c02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <prvAddNewTaskToReadyList+0xc8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <prvAddNewTaskToReadyList+0xc8>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <prvAddNewTaskToReadyList+0xcc>)
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff f925 	bl	8002e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c32:	f001 fad3 	bl	80051dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <prvAddNewTaskToReadyList+0xc0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvAddNewTaskToReadyList+0xbc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d207      	bcs.n	8003c5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <prvAddNewTaskToReadyList+0xd0>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200007f8 	.word	0x200007f8
 8003c68:	200006f8 	.word	0x200006f8
 8003c6c:	20000804 	.word	0x20000804
 8003c70:	20000814 	.word	0x20000814
 8003c74:	20000800 	.word	0x20000800
 8003c78:	200006fc 	.word	0x200006fc
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <vTaskDelay+0x60>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <vTaskDelay+0x30>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cb0:	f000 f880 	bl	8003db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fddc 	bl	8004874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cbc:	f000 f8c2 	bl	8003e44 <xTaskResumeAll>
 8003cc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <vTaskDelay+0x64>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000820 	.word	0x20000820
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cf6:	463a      	mov	r2, r7
 8003cf8:	1d39      	adds	r1, r7, #4
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fa54 	bl	80001ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	460a      	mov	r2, r1
 8003d16:	4921      	ldr	r1, [pc, #132]	; (8003d9c <vTaskStartScheduler+0xb4>)
 8003d18:	4821      	ldr	r0, [pc, #132]	; (8003da0 <vTaskStartScheduler+0xb8>)
 8003d1a:	f7ff fe15 	bl	8003948 <xTaskCreateStatic>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <vTaskStartScheduler+0xbc>)
 8003d22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <vTaskStartScheduler+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e001      	b.n	8003d36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d3c:	f000 fe00 	bl	8004940 <xTimerCreateTimerTask>
 8003d40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d116      	bne.n	8003d76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	613b      	str	r3, [r7, #16]
}
 8003d5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <vTaskStartScheduler+0xc0>)
 8003d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <vTaskStartScheduler+0xc4>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <vTaskStartScheduler+0xc8>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d70:	f001 f992 	bl	8005098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d74:	e00e      	b.n	8003d94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d10a      	bne.n	8003d94 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60fb      	str	r3, [r7, #12]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vTaskStartScheduler+0xaa>
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08005780 	.word	0x08005780
 8003da0:	080044d5 	.word	0x080044d5
 8003da4:	2000081c 	.word	0x2000081c
 8003da8:	20000818 	.word	0x20000818
 8003dac:	20000804 	.word	0x20000804
 8003db0:	200007fc 	.word	0x200007fc

08003db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <vTaskSuspendAll+0x18>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a03      	ldr	r2, [pc, #12]	; (8003dcc <vTaskSuspendAll+0x18>)
 8003dc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000820 	.word	0x20000820

08003dd0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <prvGetExpectedIdleTime+0x60>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d201      	bcs.n	8003dec <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <prvGetExpectedIdleTime+0x64>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e012      	b.n	8003e22 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <prvGetExpectedIdleTime+0x68>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d902      	bls.n	8003e0a <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00b      	b.n	8003e22 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e005      	b.n	8003e22 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <prvGetExpectedIdleTime+0x6c>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <prvGetExpectedIdleTime+0x70>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8003e22:	68fb      	ldr	r3, [r7, #12]
	}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000800 	.word	0x20000800
 8003e34:	200006f8 	.word	0x200006f8
 8003e38:	200006fc 	.word	0x200006fc
 8003e3c:	20000818 	.word	0x20000818
 8003e40:	200007fc 	.word	0x200007fc

08003e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <xTaskResumeAll+0x114>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	603b      	str	r3, [r7, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e70:	f001 f984 	bl	800517c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e74:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <xTaskResumeAll+0x114>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4a37      	ldr	r2, [pc, #220]	; (8003f58 <xTaskResumeAll+0x114>)
 8003e7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <xTaskResumeAll+0x114>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d161      	bne.n	8003f4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e86:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <xTaskResumeAll+0x118>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d05d      	beq.n	8003f4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8e:	e02e      	b.n	8003eee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e90:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <xTaskResumeAll+0x11c>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f848 	bl	8002f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f843 	bl	8002f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <xTaskResumeAll+0x120>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <xTaskResumeAll+0x120>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <xTaskResumeAll+0x124>)
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe ffd1 	bl	8002e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <xTaskResumeAll+0x128>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ee8:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <xTaskResumeAll+0x12c>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <xTaskResumeAll+0x11c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cc      	bne.n	8003e90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003efc:	f000 fbf6 	bl	80046ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f00:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <xTaskResumeAll+0x130>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f0c:	f000 f86a 	bl	8003fe4 <xTaskIncrementTick>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <xTaskResumeAll+0x12c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f1      	bne.n	8003f0c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <xTaskResumeAll+0x130>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <xTaskResumeAll+0x12c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <xTaskResumeAll+0x134>)
 8003f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 f947 	bl	80051dc <vPortExitCritical>

	return xAlreadyYielded;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000820 	.word	0x20000820
 8003f5c:	200007f8 	.word	0x200007f8
 8003f60:	200007b8 	.word	0x200007b8
 8003f64:	20000800 	.word	0x20000800
 8003f68:	200006fc 	.word	0x200006fc
 8003f6c:	200006f8 	.word	0x200006f8
 8003f70:	2000080c 	.word	0x2000080c
 8003f74:	20000808 	.word	0x20000808
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <xTaskGetTickCount+0x18>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	200007fc 	.word	0x200007fc

08003f98 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <vTaskStepTick+0x44>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <vTaskStepTick+0x48>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d90a      	bls.n	8003fc6 <vTaskStepTick+0x2e>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	60fb      	str	r3, [r7, #12]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <vTaskStepTick+0x44>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <vTaskStepTick+0x44>)
 8003fd0:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	200007fc 	.word	0x200007fc
 8003fe0:	20000818 	.word	0x20000818

08003fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fee:	4b52      	ldr	r3, [pc, #328]	; (8004138 <xTaskIncrementTick+0x154>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 808e 	bne.w	8004114 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <xTaskIncrementTick+0x158>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004000:	4a4e      	ldr	r2, [pc, #312]	; (800413c <xTaskIncrementTick+0x158>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800400c:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <xTaskIncrementTick+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <xTaskIncrementTick+0x48>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	603b      	str	r3, [r7, #0]
}
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <xTaskIncrementTick+0x46>
 800402c:	4b44      	ldr	r3, [pc, #272]	; (8004140 <xTaskIncrementTick+0x15c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b44      	ldr	r3, [pc, #272]	; (8004144 <xTaskIncrementTick+0x160>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a42      	ldr	r2, [pc, #264]	; (8004140 <xTaskIncrementTick+0x15c>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4a42      	ldr	r2, [pc, #264]	; (8004144 <xTaskIncrementTick+0x160>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b41      	ldr	r3, [pc, #260]	; (8004148 <xTaskIncrementTick+0x164>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a40      	ldr	r2, [pc, #256]	; (8004148 <xTaskIncrementTick+0x164>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	f000 fb4f 	bl	80046ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800404e:	4b3f      	ldr	r3, [pc, #252]	; (800414c <xTaskIncrementTick+0x168>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	429a      	cmp	r2, r3
 8004056:	d348      	bcc.n	80040ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <xTaskIncrementTick+0x15c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004062:	4b3a      	ldr	r3, [pc, #232]	; (800414c <xTaskIncrementTick+0x168>)
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	601a      	str	r2, [r3, #0]
					break;
 800406a:	e03e      	b.n	80040ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <xTaskIncrementTick+0x15c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d203      	bcs.n	800408c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004084:	4a31      	ldr	r2, [pc, #196]	; (800414c <xTaskIncrementTick+0x168>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800408a:	e02e      	b.n	80040ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ff4e 	bl	8002f32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe ff45 	bl	8002f32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2201      	movs	r2, #1
 80040ae:	409a      	lsls	r2, r3
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <xTaskIncrementTick+0x16c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	4a26      	ldr	r2, [pc, #152]	; (8004150 <xTaskIncrementTick+0x16c>)
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4a23      	ldr	r2, [pc, #140]	; (8004154 <xTaskIncrementTick+0x170>)
 80040c8:	441a      	add	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe fed3 	bl	8002e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <xTaskIncrementTick+0x174>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b9      	bcc.n	8004058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e8:	e7b6      	b.n	8004058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <xTaskIncrementTick+0x174>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4918      	ldr	r1, [pc, #96]	; (8004154 <xTaskIncrementTick+0x170>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d901      	bls.n	8004106 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004102:	2301      	movs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <xTaskIncrementTick+0x178>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 800410e:	f7fc f837 	bl	8000180 <vApplicationTickHook>
 8004112:	e006      	b.n	8004122 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <xTaskIncrementTick+0x178>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <xTaskIncrementTick+0x178>)
 800411c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800411e:	f7fc f82f 	bl	8000180 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <xTaskIncrementTick+0x17c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000820 	.word	0x20000820
 800413c:	200007fc 	.word	0x200007fc
 8004140:	200007b0 	.word	0x200007b0
 8004144:	200007b4 	.word	0x200007b4
 8004148:	20000810 	.word	0x20000810
 800414c:	20000818 	.word	0x20000818
 8004150:	20000800 	.word	0x20000800
 8004154:	200006fc 	.word	0x200006fc
 8004158:	200006f8 	.word	0x200006f8
 800415c:	20000808 	.word	0x20000808
 8004160:	2000080c 	.word	0x2000080c

08004164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <vTaskSwitchContext+0xec>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <vTaskSwitchContext+0xf0>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004178:	e066      	b.n	8004248 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <vTaskSwitchContext+0xf0>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <vTaskSwitchContext+0xf4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	429a      	cmp	r2, r3
 8004196:	d111      	bne.n	80041bc <vTaskSwitchContext+0x58>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3304      	adds	r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d10b      	bne.n	80041bc <vTaskSwitchContext+0x58>
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3308      	adds	r3, #8
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d105      	bne.n	80041bc <vTaskSwitchContext+0x58>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	330c      	adds	r3, #12
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d008      	beq.n	80041ce <vTaskSwitchContext+0x6a>
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <vTaskSwitchContext+0xf4>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <vTaskSwitchContext+0xf4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3334      	adds	r3, #52	; 0x34
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fb ffdf 	bl	800018c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <vTaskSwitchContext+0xf8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	f1c3 031f 	rsb	r3, r3, #31
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	491e      	ldr	r1, [pc, #120]	; (8004260 <vTaskSwitchContext+0xfc>)
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <vTaskSwitchContext+0xaa>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	607b      	str	r3, [r7, #4]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <vTaskSwitchContext+0xa8>
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <vTaskSwitchContext+0xfc>)
 800421a:	4413      	add	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3308      	adds	r3, #8
 8004230:	429a      	cmp	r2, r3
 8004232:	d104      	bne.n	800423e <vTaskSwitchContext+0xda>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <vTaskSwitchContext+0xf4>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000820 	.word	0x20000820
 8004254:	2000080c 	.word	0x2000080c
 8004258:	200006f8 	.word	0x200006f8
 800425c:	20000800 	.word	0x20000800
 8004260:	200006fc 	.word	0x200006fc

08004264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60fb      	str	r3, [r7, #12]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <vTaskPlaceOnEventList+0x44>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3318      	adds	r3, #24
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe fe15 	bl	8002ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004298:	2101      	movs	r1, #1
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	f000 faea 	bl	8004874 <prvAddCurrentTaskToDelayedList>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200006f8 	.word	0x200006f8

080042ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <vTaskPlaceOnEventListRestricted+0x54>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3318      	adds	r3, #24
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7fe fdcd 	bl	8002e7c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f000 fabf 	bl	8004874 <prvAddCurrentTaskToDelayedList>
	}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200006f8 	.word	0x200006f8

08004304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60fb      	str	r3, [r7, #12]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3318      	adds	r3, #24
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fdfc 	bl	8002f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <xTaskRemoveFromEventList+0xb0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11e      	bne.n	8004380 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fdf3 	bl	8002f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <xTaskRemoveFromEventList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <xTaskRemoveFromEventList+0xb4>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <xTaskRemoveFromEventList+0xb8>)
 800436c:	441a      	add	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fe fd81 	bl	8002e7c <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800437a:	f000 f9b7 	bl	80046ec <prvResetNextTaskUnblockTime>
 800437e:	e005      	b.n	800438c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3318      	adds	r3, #24
 8004384:	4619      	mov	r1, r3
 8004386:	480e      	ldr	r0, [pc, #56]	; (80043c0 <xTaskRemoveFromEventList+0xbc>)
 8004388:	f7fe fd78 	bl	8002e7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <xTaskRemoveFromEventList+0xc0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	429a      	cmp	r2, r3
 8004398:	d905      	bls.n	80043a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800439a:	2301      	movs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <xTaskRemoveFromEventList+0xc4>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e001      	b.n	80043aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043aa:	697b      	ldr	r3, [r7, #20]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000820 	.word	0x20000820
 80043b8:	20000800 	.word	0x20000800
 80043bc:	200006fc 	.word	0x200006fc
 80043c0:	200007b8 	.word	0x200007b8
 80043c4:	200006f8 	.word	0x200006f8
 80043c8:	2000080c 	.word	0x2000080c

080043cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <vTaskInternalSetTimeOutState+0x24>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <vTaskInternalSetTimeOutState+0x28>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	605a      	str	r2, [r3, #4]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000810 	.word	0x20000810
 80043f4:	200007fc 	.word	0x200007fc

080043f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800443a:	f000 fe9f 	bl	800517c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <xTaskCheckForTimeOut+0xbc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d102      	bne.n	800445e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e023      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <xTaskCheckForTimeOut+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d007      	beq.n	800447a <xTaskCheckForTimeOut+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e015      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	d20b      	bcs.n	800449c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff9b 	bl	80043cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e004      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f000 fe99 	bl	80051dc <vPortExitCritical>

	return xReturn;
 80044aa:	69fb      	ldr	r3, [r7, #28]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200007fc 	.word	0x200007fc
 80044b8:	20000810 	.word	0x20000810

080044bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <vTaskMissedYield+0x14>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	2000080c 	.word	0x2000080c

080044d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044dc:	f000 f8a8 	bl	8004630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <prvIdleTask+0x70>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d907      	bls.n	80044f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <prvIdleTask+0x74>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80044f8:	f7ff fc6a 	bl	8003dd0 <prvGetExpectedIdleTime>
 80044fc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d9eb      	bls.n	80044dc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8004504:	f7ff fc56 	bl	8003db4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <prvIdleTask+0x78>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <prvIdleTask+0x7c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d20a      	bcs.n	800452a <prvIdleTask+0x56>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60bb      	str	r3, [r7, #8]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800452a:	f7ff fc51 	bl	8003dd0 <prvGetExpectedIdleTime>
 800452e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d902      	bls.n	800453c <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7fb ff5e 	bl	80003f8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800453c:	f7ff fc82 	bl	8003e44 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8004540:	e7cc      	b.n	80044dc <prvIdleTask+0x8>
 8004542:	bf00      	nop
 8004544:	200006fc 	.word	0x200006fc
 8004548:	e000ed04 	.word	0xe000ed04
 800454c:	20000818 	.word	0x20000818
 8004550:	200007fc 	.word	0x200007fc

08004554 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800455e:	2301      	movs	r3, #1
 8004560:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <eTaskConfirmSleepModeStatus+0x4c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800456a:	2300      	movs	r3, #0
 800456c:	71fb      	strb	r3, [r7, #7]
 800456e:	e010      	b.n	8004592 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <eTaskConfirmSleepModeStatus+0x50>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8004578:	2300      	movs	r3, #0
 800457a:	71fb      	strb	r3, [r7, #7]
 800457c:	e009      	b.n	8004592 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <eTaskConfirmSleepModeStatus+0x54>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <eTaskConfirmSleepModeStatus+0x58>)
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	1acb      	subs	r3, r1, r3
 800458a:	429a      	cmp	r2, r3
 800458c:	d101      	bne.n	8004592 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800458e:	2302      	movs	r3, #2
 8004590:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8004592:	79fb      	ldrb	r3, [r7, #7]
	}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	200007b8 	.word	0x200007b8
 80045a4:	2000080c 	.word	0x2000080c
 80045a8:	200007e4 	.word	0x200007e4
 80045ac:	200007f8 	.word	0x200007f8

080045b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	e00c      	b.n	80045d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <prvInitialiseTaskLists+0x60>)
 80045c8:	4413      	add	r3, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fc2b 	bl	8002e26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d9ef      	bls.n	80045bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045dc:	480d      	ldr	r0, [pc, #52]	; (8004614 <prvInitialiseTaskLists+0x64>)
 80045de:	f7fe fc22 	bl	8002e26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045e2:	480d      	ldr	r0, [pc, #52]	; (8004618 <prvInitialiseTaskLists+0x68>)
 80045e4:	f7fe fc1f 	bl	8002e26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045e8:	480c      	ldr	r0, [pc, #48]	; (800461c <prvInitialiseTaskLists+0x6c>)
 80045ea:	f7fe fc1c 	bl	8002e26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ee:	480c      	ldr	r0, [pc, #48]	; (8004620 <prvInitialiseTaskLists+0x70>)
 80045f0:	f7fe fc19 	bl	8002e26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045f4:	480b      	ldr	r0, [pc, #44]	; (8004624 <prvInitialiseTaskLists+0x74>)
 80045f6:	f7fe fc16 	bl	8002e26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvInitialiseTaskLists+0x78>)
 80045fc:	4a05      	ldr	r2, [pc, #20]	; (8004614 <prvInitialiseTaskLists+0x64>)
 80045fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvInitialiseTaskLists+0x7c>)
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <prvInitialiseTaskLists+0x68>)
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200006fc 	.word	0x200006fc
 8004614:	20000788 	.word	0x20000788
 8004618:	2000079c 	.word	0x2000079c
 800461c:	200007b8 	.word	0x200007b8
 8004620:	200007cc 	.word	0x200007cc
 8004624:	200007e4 	.word	0x200007e4
 8004628:	200007b0 	.word	0x200007b0
 800462c:	200007b4 	.word	0x200007b4

08004630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004636:	e019      	b.n	800466c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004638:	f000 fda0 	bl	800517c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvCheckTasksWaitingTermination+0x50>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe fc72 	bl	8002f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <prvCheckTasksWaitingTermination+0x54>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3b01      	subs	r3, #1
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <prvCheckTasksWaitingTermination+0x54>)
 8004656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 8004660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004662:	f000 fdbb 	bl	80051dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f810 	bl	800468c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <prvCheckTasksWaitingTermination+0x58>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e1      	bne.n	8004638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200007cc 	.word	0x200007cc
 8004684:	200007f8 	.word	0x200007f8
 8004688:	200007e0 	.word	0x200007e0

0800468c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fef0 	bl	8005488 <vPortFree>
				vPortFree( pxTCB );
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 feed 	bl	8005488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046ae:	e018      	b.n	80046e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d103      	bne.n	80046c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fee4 	bl	8005488 <vPortFree>
	}
 80046c0:	e00f      	b.n	80046e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d00a      	beq.n	80046e2 <prvDeleteTCB+0x56>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60fb      	str	r3, [r7, #12]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <prvDeleteTCB+0x54>
	}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <prvResetNextTaskUnblockTime+0x38>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <prvResetNextTaskUnblockTime+0x3c>)
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004704:	e008      	b.n	8004718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <prvResetNextTaskUnblockTime+0x38>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <prvResetNextTaskUnblockTime+0x3c>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	200007b0 	.word	0x200007b0
 8004728:	20000818 	.word	0x20000818

0800472c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <xTaskGetSchedulerState+0x34>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800473a:	2301      	movs	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	e008      	b.n	8004752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <xTaskGetSchedulerState+0x38>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004748:	2302      	movs	r3, #2
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	e001      	b.n	8004752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004752:	687b      	ldr	r3, [r7, #4]
	}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000804 	.word	0x20000804
 8004764:	20000820 	.word	0x20000820

08004768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d06e      	beq.n	800485c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800477e:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <xTaskPriorityDisinherit+0x100>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d00a      	beq.n	800479e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60bb      	str	r3, [r7, #8]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d044      	beq.n	800485c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d140      	bne.n	800485c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fba7 	bl	8002f32 <uxListRemove>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d115      	bne.n	8004816 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ee:	491f      	ldr	r1, [pc, #124]	; (800486c <xTaskPriorityDisinherit+0x104>)
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xTaskPriorityDisinherit+0xae>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	2201      	movs	r2, #1
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <xTaskPriorityDisinherit+0x108>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4013      	ands	r3, r2
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <xTaskPriorityDisinherit+0x108>)
 8004814:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f1c3 0207 	rsb	r2, r3, #7
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	2201      	movs	r2, #1
 8004830:	409a      	lsls	r2, r3
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <xTaskPriorityDisinherit+0x108>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <xTaskPriorityDisinherit+0x108>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <xTaskPriorityDisinherit+0x104>)
 800484a:	441a      	add	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fe fb12 	bl	8002e7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800485c:	697b      	ldr	r3, [r7, #20]
	}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200006f8 	.word	0x200006f8
 800486c:	200006fc 	.word	0x200006fc
 8004870:	20000800 	.word	0x20000800

08004874 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fb51 	bl	8002f32 <uxListRemove>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2201      	movs	r2, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43da      	mvns	r2, r3
 80048a4:	4b21      	ldr	r3, [pc, #132]	; (800492c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4013      	ands	r3, r2
 80048aa:	4a20      	ldr	r2, [pc, #128]	; (800492c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d10a      	bne.n	80048cc <prvAddCurrentTaskToDelayedList+0x58>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	481a      	ldr	r0, [pc, #104]	; (8004930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048c6:	f7fe fad9 	bl	8002e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ca:	e026      	b.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d209      	bcs.n	80048f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f7fe fae6 	bl	8002ec2 <vListInsert>
}
 80048f6:	e010      	b.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fe fadc 	bl	8002ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <prvAddCurrentTaskToDelayedList+0xc8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d202      	bcs.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200007fc 	.word	0x200007fc
 8004928:	200006f8 	.word	0x200006f8
 800492c:	20000800 	.word	0x20000800
 8004930:	200007e4 	.word	0x200007e4
 8004934:	200007b4 	.word	0x200007b4
 8004938:	200007b0 	.word	0x200007b0
 800493c:	20000818 	.word	0x20000818

08004940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800494a:	f000 fae9 	bl	8004f20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800494e:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <xTimerCreateTimerTask+0x80>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d021      	beq.n	800499a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800495e:	1d3a      	adds	r2, r7, #4
 8004960:	f107 0108 	add.w	r1, r7, #8
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fc37 	bl	80001dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	9202      	str	r2, [sp, #8]
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	2306      	movs	r3, #6
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	460a      	mov	r2, r1
 8004980:	4910      	ldr	r1, [pc, #64]	; (80049c4 <xTimerCreateTimerTask+0x84>)
 8004982:	4811      	ldr	r0, [pc, #68]	; (80049c8 <xTimerCreateTimerTask+0x88>)
 8004984:	f7fe ffe0 	bl	8003948 <xTaskCreateStatic>
 8004988:	4603      	mov	r3, r0
 800498a:	4a10      	ldr	r2, [pc, #64]	; (80049cc <xTimerCreateTimerTask+0x8c>)
 800498c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <xTimerCreateTimerTask+0x8c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004996:	2301      	movs	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	613b      	str	r3, [r7, #16]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049b6:	697b      	ldr	r3, [r7, #20]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000854 	.word	0x20000854
 80049c4:	08005788 	.word	0x08005788
 80049c8:	08004b05 	.word	0x08004b05
 80049cc:	20000858 	.word	0x20000858

080049d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	623b      	str	r3, [r7, #32]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049fe:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <xTimerGenericCommand+0x98>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02a      	beq.n	8004a5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	dc18      	bgt.n	8004a4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a18:	f7ff fe88 	bl	800472c <xTaskGetSchedulerState>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d109      	bne.n	8004a36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <xTimerGenericCommand+0x98>)
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	f107 0114 	add.w	r1, r7, #20
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2e:	f7fe fba9 	bl	8003184 <xQueueGenericSend>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24
 8004a34:	e012      	b.n	8004a5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <xTimerGenericCommand+0x98>)
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f107 0114 	add.w	r1, r7, #20
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2200      	movs	r2, #0
 8004a42:	f7fe fb9f 	bl	8003184 <xQueueGenericSend>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
 8004a48:	e008      	b.n	8004a5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a4a:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <xTimerGenericCommand+0x98>)
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f107 0114 	add.w	r1, r7, #20
 8004a52:	2300      	movs	r3, #0
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	f7fe fc93 	bl	8003380 <xQueueGenericSendFromISR>
 8004a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000854 	.word	0x20000854

08004a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <prvProcessExpiredTimer+0x94>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fa54 	bl	8002f32 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	18d1      	adds	r1, r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	f000 f8cf 	bl	8004c48 <prvInsertTimerInActiveList>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01f      	beq.n	8004af0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7ff ff88 	bl	80049d0 <xTimerGenericCommand>
 8004ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d113      	bne.n	8004af0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60fb      	str	r3, [r7, #12]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	6978      	ldr	r0, [r7, #20]
 8004af6:	4798      	blx	r3
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000084c 	.word	0x2000084c

08004b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f857 	bl	8004bc4 <prvGetNextExpireTime>
 8004b16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f803 	bl	8004b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b22:	f000 f8d3 	bl	8004ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b26:	e7f1      	b.n	8004b0c <prvTimerTask+0x8>

08004b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b32:	f7ff f93f 	bl	8003db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f864 	bl	8004c08 <prvSampleTimeNow>
 8004b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d130      	bne.n	8004baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <prvProcessTimerOrBlockTask+0x3c>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d806      	bhi.n	8004b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b56:	f7ff f975 	bl	8003e44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff85 	bl	8004a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b62:	e024      	b.n	8004bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <prvProcessTimerOrBlockTask+0x90>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <prvProcessTimerOrBlockTask+0x50>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <prvProcessTimerOrBlockTask+0x52>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <prvProcessTimerOrBlockTask+0x94>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f7fe fea9 	bl	80038e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b8e:	f7ff f959 	bl	8003e44 <xTaskResumeAll>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <prvProcessTimerOrBlockTask+0x98>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
}
 8004ba8:	e001      	b.n	8004bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004baa:	f7ff f94b 	bl	8003e44 <xTaskResumeAll>
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000850 	.word	0x20000850
 8004bbc:	20000854 	.word	0x20000854
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <prvGetNextExpireTime+0x40>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <prvGetNextExpireTime+0x16>
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	e000      	b.n	8004bdc <prvGetNextExpireTime+0x18>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <prvGetNextExpireTime+0x40>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e001      	b.n	8004bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	2000084c 	.word	0x2000084c

08004c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c10:	f7ff f9b4 	bl	8003f7c <xTaskGetTickCount>
 8004c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <prvSampleTimeNow+0x3c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d205      	bcs.n	8004c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c20:	f000 f91a 	bl	8004e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c32:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <prvSampleTimeNow+0x3c>)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c38:	68fb      	ldr	r3, [r7, #12]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000085c 	.word	0x2000085c

08004c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d812      	bhi.n	8004c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e01b      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <prvInsertTimerInActiveList+0x7c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe f918 	bl	8002ec2 <vListInsert>
 8004c92:	e012      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d206      	bcs.n	8004caa <prvInsertTimerInActiveList+0x62>
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e007      	b.n	8004cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <prvInsertTimerInActiveList+0x80>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fe f904 	bl	8002ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cba:	697b      	ldr	r3, [r7, #20]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000850 	.word	0x20000850
 8004cc8:	2000084c 	.word	0x2000084c

08004ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cd2:	e0ae      	b.n	8004e32 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f2c0 80aa 	blt.w	8004e30 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	3304      	adds	r3, #4
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe f920 	bl	8002f32 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff87 	bl	8004c08 <prvSampleTimeNow>
 8004cfa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	f200 8097 	bhi.w	8004e32 <prvProcessReceivedCommands+0x166>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <prvProcessReceivedCommands+0x40>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004da9 	.word	0x08004da9
 8004d1c:	08004dbd 	.word	0x08004dbd
 8004d20:	08004e07 	.word	0x08004e07
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d35 	.word	0x08004d35
 8004d2c:	08004da9 	.word	0x08004da9
 8004d30:	08004dbd 	.word	0x08004dbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	18d1      	adds	r1, r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d54:	f7ff ff78 	bl	8004c48 <prvInsertTimerInActiveList>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d069      	beq.n	8004e32 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05e      	beq.n	8004e32 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	2100      	movs	r1, #0
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f7ff fe23 	bl	80049d0 <xTimerGenericCommand>
 8004d8a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d14f      	bne.n	8004e32 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	61bb      	str	r3, [r7, #24]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004dba:	e03a      	b.n	8004e32 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	617b      	str	r3, [r7, #20]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	18d1      	adds	r1, r2, r3
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e00:	f7ff ff22 	bl	8004c48 <prvInsertTimerInActiveList>
					break;
 8004e04:	e015      	b.n	8004e32 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e16:	f000 fb37 	bl	8005488 <vPortFree>
 8004e1a:	e00a      	b.n	8004e32 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e2e:	e000      	b.n	8004e32 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <prvProcessReceivedCommands+0x188>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f107 0108 	add.w	r1, r7, #8
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fb37 	bl	80034b0 <xQueueReceive>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f af45 	bne.w	8004cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000854 	.word	0x20000854

08004e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e5e:	e048      	b.n	8004ef2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e60:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe f85a 	bl	8002f32 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02e      	beq.n	8004ef2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90e      	bls.n	8004ec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eb2:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7fe f800 	bl	8002ec2 <vListInsert>
 8004ec2:	e016      	b.n	8004ef2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fd7e 	bl	80049d0 <xTimerGenericCommand>
 8004ed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	603b      	str	r3, [r7, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1b1      	bne.n	8004e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <prvSwitchTimerLists+0xc4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <prvSwitchTimerLists+0xc0>)
 8004f08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <prvSwitchTimerLists+0xc4>)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	6013      	str	r3, [r2, #0]
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000084c 	.word	0x2000084c
 8004f1c:	20000850 	.word	0x20000850

08004f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f26:	f000 f929 	bl	800517c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <prvCheckForValidListAndQueue+0x60>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d120      	bne.n	8004f74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f32:	4814      	ldr	r0, [pc, #80]	; (8004f84 <prvCheckForValidListAndQueue+0x64>)
 8004f34:	f7fd ff77 	bl	8002e26 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f38:	4813      	ldr	r0, [pc, #76]	; (8004f88 <prvCheckForValidListAndQueue+0x68>)
 8004f3a:	f7fd ff74 	bl	8002e26 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <prvCheckForValidListAndQueue+0x6c>)
 8004f40:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <prvCheckForValidListAndQueue+0x64>)
 8004f42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <prvCheckForValidListAndQueue+0x70>)
 8004f46:	4a10      	ldr	r2, [pc, #64]	; (8004f88 <prvCheckForValidListAndQueue+0x68>)
 8004f48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <prvCheckForValidListAndQueue+0x74>)
 8004f50:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <prvCheckForValidListAndQueue+0x78>)
 8004f52:	210c      	movs	r1, #12
 8004f54:	200a      	movs	r0, #10
 8004f56:	f7fe f87d 	bl	8003054 <xQueueGenericCreateStatic>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <prvCheckForValidListAndQueue+0x60>)
 8004f5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvCheckForValidListAndQueue+0x60>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <prvCheckForValidListAndQueue+0x60>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	490b      	ldr	r1, [pc, #44]	; (8004f9c <prvCheckForValidListAndQueue+0x7c>)
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fc8e 	bl	8003890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f74:	f000 f932 	bl	80051dc <vPortExitCritical>
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000854 	.word	0x20000854
 8004f84:	20000824 	.word	0x20000824
 8004f88:	20000838 	.word	0x20000838
 8004f8c:	2000084c 	.word	0x2000084c
 8004f90:	20000850 	.word	0x20000850
 8004f94:	200008d8 	.word	0x200008d8
 8004f98:	20000860 	.word	0x20000860
 8004f9c:	08005790 	.word	0x08005790

08004fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <pxPortInitialiseStack+0x54>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b14      	subs	r3, #20
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b20      	subs	r3, #32
 8004fe6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	08004ff9 	.word	0x08004ff9

08004ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <prvTaskExitError+0x54>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d00a      	beq.n	8005022 <prvTaskExitError+0x2a>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60fb      	str	r3, [r7, #12]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <prvTaskExitError+0x28>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	60bb      	str	r3, [r7, #8]
}
 8005034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005036:	bf00      	nop
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0fc      	beq.n	8005038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c

08005050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <pxCurrentTCBConst2>)
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	6808      	ldr	r0, [r1, #0]
 8005056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800505a:	f380 8809 	msr	PSP, r0
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	f04e 0e0d 	orr.w	lr, lr, #13
 800506e:	4770      	bx	lr

08005070 <pxCurrentTCBConst2>:
 8005070:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <prvPortStartFirstTask+0x1c>)
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f380 8808 	msr	MSP, r0
 8005082:	b662      	cpsie	i
 8005084:	b661      	cpsie	f
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	df00      	svc	0
 8005090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005092:	bf00      	nop
 8005094:	e000ed08 	.word	0xe000ed08

08005098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <xPortStartScheduler+0xd0>)
 80050a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	22ff      	movs	r2, #255	; 0xff
 80050ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4b2a      	ldr	r3, [pc, #168]	; (800516c <xPortStartScheduler+0xd4>)
 80050c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050c6:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <xPortStartScheduler+0xd8>)
 80050c8:	2207      	movs	r2, #7
 80050ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050cc:	e009      	b.n	80050e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <xPortStartScheduler+0xd8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <xPortStartScheduler+0xd8>)
 80050d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d0ef      	beq.n	80050ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <xPortStartScheduler+0xd8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1c3 0307 	rsb	r3, r3, #7
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00a      	beq.n	8005110 <xPortStartScheduler+0x78>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xPortStartScheduler+0xd8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	4a16      	ldr	r2, [pc, #88]	; (8005170 <xPortStartScheduler+0xd8>)
 8005118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <xPortStartScheduler+0xd8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <xPortStartScheduler+0xd8>)
 8005124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <xPortStartScheduler+0xdc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <xPortStartScheduler+0xdc>)
 8005134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <xPortStartScheduler+0xdc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <xPortStartScheduler+0xdc>)
 8005140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005146:	f7fb f8a9 	bl	800029c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <xPortStartScheduler+0xe0>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005150:	f7ff ff92 	bl	8005078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005154:	f7ff f806 	bl	8004164 <vTaskSwitchContext>
	prvTaskExitError();
 8005158:	f7ff ff4e 	bl	8004ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	e000e400 	.word	0xe000e400
 800516c:	20000920 	.word	0x20000920
 8005170:	20000924 	.word	0x20000924
 8005174:	e000ed20 	.word	0xe000ed20
 8005178:	2000000c 	.word	0x2000000c

0800517c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
}
 8005194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <vPortEnterCritical+0x58>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a0d      	ldr	r2, [pc, #52]	; (80051d4 <vPortEnterCritical+0x58>)
 800519e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <vPortEnterCritical+0x58>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10f      	bne.n	80051c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <vPortEnterCritical+0x5c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	603b      	str	r3, [r7, #0]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vPortEnterCritical+0x4a>
	}
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000000c 	.word	0x2000000c
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <vPortExitCritical+0x4c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <vPortExitCritical+0x24>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <vPortExitCritical+0x4c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <vPortExitCritical+0x4c>)
 8005208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <vPortExitCritical+0x4c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <vPortExitCritical+0x42>
 8005212:	2300      	movs	r3, #0
 8005214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f383 8811 	msr	BASEPRI, r3
}
 800521c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	2000000c 	.word	0x2000000c
 800522c:	00000000 	.word	0x00000000

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005240:	6010      	str	r0, [r2, #0]
 8005242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800524a:	f380 8811 	msr	BASEPRI, r0
 800524e:	f7fe ff89 	bl	8004164 <vTaskSwitchContext>
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005266:	f380 8809 	msr	PSP, r0
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	4770      	bx	lr

08005270 <pxCurrentTCBConst>:
 8005270:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d914      	bls.n	80052b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <vPortValidateInterruptPriority+0x6c>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <vPortValidateInterruptPriority+0x70>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20a      	bcs.n	80052b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052b4:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <vPortValidateInterruptPriority+0x74>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <vPortValidateInterruptPriority+0x78>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d90a      	bls.n	80052da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	603b      	str	r3, [r7, #0]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vPortValidateInterruptPriority+0x60>
	}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	e000e3f0 	.word	0xe000e3f0
 80052e8:	20000920 	.word	0x20000920
 80052ec:	e000ed0c 	.word	0xe000ed0c
 80052f0:	20000924 	.word	0x20000924

080052f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005300:	f7fe fd58 	bl	8003db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005304:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <pvPortMalloc+0x180>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800530c:	f000 f916 	bl	800553c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005310:	4b59      	ldr	r3, [pc, #356]	; (8005478 <pvPortMalloc+0x184>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 808e 	bne.w	800543a <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01d      	beq.n	8005360 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005324:	2208      	movs	r2, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d014      	beq.n	8005360 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	3308      	adds	r3, #8
 800533e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <pvPortMalloc+0x6c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	617b      	str	r3, [r7, #20]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d069      	beq.n	800543a <pvPortMalloc+0x146>
 8005366:	4b45      	ldr	r3, [pc, #276]	; (800547c <pvPortMalloc+0x188>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d864      	bhi.n	800543a <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005370:	4b43      	ldr	r3, [pc, #268]	; (8005480 <pvPortMalloc+0x18c>)
 8005372:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <pvPortMalloc+0x18c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800537a:	e004      	b.n	8005386 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <pvPortMalloc+0xa4>
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f1      	bne.n	800537c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005398:	4b36      	ldr	r3, [pc, #216]	; (8005474 <pvPortMalloc+0x180>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	429a      	cmp	r2, r3
 80053a0:	d04b      	beq.n	800543a <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2208      	movs	r2, #8
 80053a8:	4413      	add	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	2308      	movs	r3, #8
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d91f      	bls.n	8005404 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <pvPortMalloc+0xf8>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	613b      	str	r3, [r7, #16]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053fe:	69b8      	ldr	r0, [r7, #24]
 8005400:	f000 f8fe 	bl	8005600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <pvPortMalloc+0x188>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <pvPortMalloc+0x188>)
 8005410:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <pvPortMalloc+0x188>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <pvPortMalloc+0x190>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d203      	bcs.n	8005426 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <pvPortMalloc+0x188>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a18      	ldr	r2, [pc, #96]	; (8005484 <pvPortMalloc+0x190>)
 8005424:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <pvPortMalloc+0x184>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	431a      	orrs	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800543a:	f7fe fd03 	bl	8003e44 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005444:	f7fa feac 	bl	80001a0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <pvPortMalloc+0x174>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60fb      	str	r3, [r7, #12]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <pvPortMalloc+0x172>
	return pvReturn;
 8005468:	69fb      	ldr	r3, [r7, #28]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200014e8 	.word	0x200014e8
 8005478:	200014f4 	.word	0x200014f4
 800547c:	200014ec 	.word	0x200014ec
 8005480:	200014e0 	.word	0x200014e0
 8005484:	200014f0 	.word	0x200014f0

08005488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d048      	beq.n	800552c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800549a:	2308      	movs	r3, #8
 800549c:	425b      	negs	r3, r3
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <vPortFree+0xac>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <vPortFree+0x44>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <vPortFree+0x62>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60bb      	str	r3, [r7, #8]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	4b11      	ldr	r3, [pc, #68]	; (8005534 <vPortFree+0xac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d019      	beq.n	800552c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d115      	bne.n	800552c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <vPortFree+0xac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	43db      	mvns	r3, r3
 800550a:	401a      	ands	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005510:	f7fe fc50 	bl	8003db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b07      	ldr	r3, [pc, #28]	; (8005538 <vPortFree+0xb0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4413      	add	r3, r2
 800551e:	4a06      	ldr	r2, [pc, #24]	; (8005538 <vPortFree+0xb0>)
 8005520:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005522:	6938      	ldr	r0, [r7, #16]
 8005524:	f000 f86c 	bl	8005600 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005528:	f7fe fc8c 	bl	8003e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800552c:	bf00      	nop
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200014f4 	.word	0x200014f4
 8005538:	200014ec 	.word	0x200014ec

0800553c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005542:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <prvHeapInit+0xac>)
 800554a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3307      	adds	r3, #7
 800555a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0307 	bic.w	r3, r3, #7
 8005562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <prvHeapInit+0xac>)
 800556c:	4413      	add	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <prvHeapInit+0xb0>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <prvHeapInit+0xb0>)
 800557c:	2200      	movs	r2, #0
 800557e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4413      	add	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005588:	2208      	movs	r2, #8
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <prvHeapInit+0xb4>)
 800559c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <prvHeapInit+0xb4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <prvHeapInit+0xb4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <prvHeapInit+0xb4>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <prvHeapInit+0xb8>)
 80055ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <prvHeapInit+0xbc>)
 80055d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <prvHeapInit+0xc0>)
 80055d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055da:	601a      	str	r2, [r3, #0]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000928 	.word	0x20000928
 80055ec:	200014e0 	.word	0x200014e0
 80055f0:	200014e8 	.word	0x200014e8
 80055f4:	200014f0 	.word	0x200014f0
 80055f8:	200014ec 	.word	0x200014ec
 80055fc:	200014f4 	.word	0x200014f4

08005600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005608:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <prvInsertBlockIntoFreeList+0xa8>)
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e002      	b.n	8005614 <prvInsertBlockIntoFreeList+0x14>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d8f7      	bhi.n	800560e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d108      	bne.n	8005642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	441a      	add	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	441a      	add	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d118      	bne.n	8005688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <prvInsertBlockIntoFreeList+0xac>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d00d      	beq.n	800567e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e008      	b.n	8005690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <prvInsertBlockIntoFreeList+0xac>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e003      	b.n	8005690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	d002      	beq.n	800569e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	200014e0 	.word	0x200014e0
 80056ac:	200014e8 	.word	0x200014e8

080056b0 <__libc_init_array>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4d0d      	ldr	r5, [pc, #52]	; (80056e8 <__libc_init_array+0x38>)
 80056b4:	4c0d      	ldr	r4, [pc, #52]	; (80056ec <__libc_init_array+0x3c>)
 80056b6:	1b64      	subs	r4, r4, r5
 80056b8:	10a4      	asrs	r4, r4, #2
 80056ba:	2600      	movs	r6, #0
 80056bc:	42a6      	cmp	r6, r4
 80056be:	d109      	bne.n	80056d4 <__libc_init_array+0x24>
 80056c0:	4d0b      	ldr	r5, [pc, #44]	; (80056f0 <__libc_init_array+0x40>)
 80056c2:	4c0c      	ldr	r4, [pc, #48]	; (80056f4 <__libc_init_array+0x44>)
 80056c4:	f000 f82e 	bl	8005724 <_init>
 80056c8:	1b64      	subs	r4, r4, r5
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	2600      	movs	r6, #0
 80056ce:	42a6      	cmp	r6, r4
 80056d0:	d105      	bne.n	80056de <__libc_init_array+0x2e>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d8:	4798      	blx	r3
 80056da:	3601      	adds	r6, #1
 80056dc:	e7ee      	b.n	80056bc <__libc_init_array+0xc>
 80056de:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e2:	4798      	blx	r3
 80056e4:	3601      	adds	r6, #1
 80056e6:	e7f2      	b.n	80056ce <__libc_init_array+0x1e>
 80056e8:	08005838 	.word	0x08005838
 80056ec:	08005838 	.word	0x08005838
 80056f0:	08005838 	.word	0x08005838
 80056f4:	0800583c 	.word	0x0800583c

080056f8 <memcpy>:
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005700:	d100      	bne.n	8005704 <memcpy+0xc>
 8005702:	4770      	bx	lr
 8005704:	b510      	push	{r4, lr}
 8005706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570e:	4291      	cmp	r1, r2
 8005710:	d1f9      	bne.n	8005706 <memcpy+0xe>
 8005712:	bd10      	pop	{r4, pc}

08005714 <memset>:
 8005714:	4402      	add	r2, r0
 8005716:	4603      	mov	r3, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	d100      	bne.n	800571e <memset+0xa>
 800571c:	4770      	bx	lr
 800571e:	f803 1b01 	strb.w	r1, [r3], #1
 8005722:	e7f9      	b.n	8005718 <memset+0x4>

08005724 <_init>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr

08005730 <_fini>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr
